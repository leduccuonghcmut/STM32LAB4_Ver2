
STM32LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003428  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003534  08003534  00013534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003554  08003554  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08003554  08003554  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003554  08003554  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003554  08003554  00013554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003558  08003558  00013558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800355c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000008c  080035e8  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  080035e8  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a881  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb2  00000000  00000000  0002a936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0002c8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  0002d4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177a8  00000000  00000000  0002df28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2bd  00000000  00000000  000456d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082864  00000000  00000000  0005398d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d61f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c94  00000000  00000000  000d6244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800351c 	.word	0x0800351c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	0800351c 	.word	0x0800351c

0800014c <isButton1_Pressed>:
int button1_long_flag = 0;
int button2_long_flag = 0;
int button3_long_flag = 0;


int isButton1_Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1_Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1_Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1_Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1_Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000a8 	.word	0x200000a8

08000170 <isButton2_Pressed>:
int isButton2_Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2_Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2_Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2_Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2_Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000ac 	.word	0x200000ac

08000194 <isButton3_Pressed>:
int isButton3_Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3_Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3_Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3_Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3_Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000b0 	.word	0x200000b0

080001b8 <getKeyInput1>:
		return 1;
	}
	return 0;
}

void getKeyInput1(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
		keyReg0[0] = keyReg1[0];
 80001bc:	4b24      	ldr	r3, [pc, #144]	; (8000250 <getKeyInput1+0x98>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a24      	ldr	r2, [pc, #144]	; (8000254 <getKeyInput1+0x9c>)
 80001c2:	6013      	str	r3, [r2, #0]
		keyReg1[0] = keyReg2[0];
 80001c4:	4b24      	ldr	r3, [pc, #144]	; (8000258 <getKeyInput1+0xa0>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a21      	ldr	r2, [pc, #132]	; (8000250 <getKeyInput1+0x98>)
 80001ca:	6013      	str	r3, [r2, #0]
		keyReg2[0] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80001cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001d0:	4822      	ldr	r0, [pc, #136]	; (800025c <getKeyInput1+0xa4>)
 80001d2:	f002 f963 	bl	800249c <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	461a      	mov	r2, r3
 80001da:	4b1f      	ldr	r3, [pc, #124]	; (8000258 <getKeyInput1+0xa0>)
 80001dc:	601a      	str	r2, [r3, #0]
		if((keyReg0[0] == keyReg1[0]) && (keyReg1[0] == keyReg2[0])){
 80001de:	4b1d      	ldr	r3, [pc, #116]	; (8000254 <getKeyInput1+0x9c>)
 80001e0:	681a      	ldr	r2, [r3, #0]
 80001e2:	4b1b      	ldr	r3, [pc, #108]	; (8000250 <getKeyInput1+0x98>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	429a      	cmp	r2, r3
 80001e8:	d130      	bne.n	800024c <getKeyInput1+0x94>
 80001ea:	4b19      	ldr	r3, [pc, #100]	; (8000250 <getKeyInput1+0x98>)
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	4b1a      	ldr	r3, [pc, #104]	; (8000258 <getKeyInput1+0xa0>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d12a      	bne.n	800024c <getKeyInput1+0x94>
			if(keyReg3[0] != keyReg2[0]){
 80001f6:	4b1a      	ldr	r3, [pc, #104]	; (8000260 <getKeyInput1+0xa8>)
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	4b17      	ldr	r3, [pc, #92]	; (8000258 <getKeyInput1+0xa0>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	429a      	cmp	r2, r3
 8000200:	d00e      	beq.n	8000220 <getKeyInput1+0x68>
				keyReg3[0] = keyReg2[0];
 8000202:	4b15      	ldr	r3, [pc, #84]	; (8000258 <getKeyInput1+0xa0>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a16      	ldr	r2, [pc, #88]	; (8000260 <getKeyInput1+0xa8>)
 8000208:	6013      	str	r3, [r2, #0]
				if(keyReg2[0] == PRESSED_STATE){
 800020a:	4b13      	ldr	r3, [pc, #76]	; (8000258 <getKeyInput1+0xa0>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d11c      	bne.n	800024c <getKeyInput1+0x94>
					button1_flag = 1;
 8000212:	4b14      	ldr	r3, [pc, #80]	; (8000264 <getKeyInput1+0xac>)
 8000214:	2201      	movs	r2, #1
 8000216:	601a      	str	r2, [r3, #0]
					timerForKeyPress = 100;
 8000218:	4b13      	ldr	r3, [pc, #76]	; (8000268 <getKeyInput1+0xb0>)
 800021a:	2264      	movs	r2, #100	; 0x64
 800021c:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 100;
					}
				}
			}
		}
}
 800021e:	e015      	b.n	800024c <getKeyInput1+0x94>
				if(keyReg2[0] == PRESSED_STATE){
 8000220:	4b0d      	ldr	r3, [pc, #52]	; (8000258 <getKeyInput1+0xa0>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d111      	bne.n	800024c <getKeyInput1+0x94>
					timerForKeyPress--;
 8000228:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <getKeyInput1+0xb0>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	3b01      	subs	r3, #1
 800022e:	4a0e      	ldr	r2, [pc, #56]	; (8000268 <getKeyInput1+0xb0>)
 8000230:	6013      	str	r3, [r2, #0]
					if(timerForKeyPress == 0){
 8000232:	4b0d      	ldr	r3, [pc, #52]	; (8000268 <getKeyInput1+0xb0>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d108      	bne.n	800024c <getKeyInput1+0x94>
						button1_flag = 1;
 800023a:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <getKeyInput1+0xac>)
 800023c:	2201      	movs	r2, #1
 800023e:	601a      	str	r2, [r3, #0]
						button1_long_flag = 1;
 8000240:	4b0a      	ldr	r3, [pc, #40]	; (800026c <getKeyInput1+0xb4>)
 8000242:	2201      	movs	r2, #1
 8000244:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 100;
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <getKeyInput1+0xb0>)
 8000248:	2264      	movs	r2, #100	; 0x64
 800024a:	601a      	str	r2, [r3, #0]
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	20000000 	.word	0x20000000
 8000258:	20000018 	.word	0x20000018
 800025c:	40010800 	.word	0x40010800
 8000260:	20000024 	.word	0x20000024
 8000264:	200000a8 	.word	0x200000a8
 8000268:	20000030 	.word	0x20000030
 800026c:	200000b4 	.word	0x200000b4

08000270 <getKeyInput2>:
void getKeyInput2(){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
		keyReg0[1] = keyReg1[1];
 8000274:	4b24      	ldr	r3, [pc, #144]	; (8000308 <getKeyInput2+0x98>)
 8000276:	685b      	ldr	r3, [r3, #4]
 8000278:	4a24      	ldr	r2, [pc, #144]	; (800030c <getKeyInput2+0x9c>)
 800027a:	6053      	str	r3, [r2, #4]
		keyReg1[1] = keyReg2[1];
 800027c:	4b24      	ldr	r3, [pc, #144]	; (8000310 <getKeyInput2+0xa0>)
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	4a21      	ldr	r2, [pc, #132]	; (8000308 <getKeyInput2+0x98>)
 8000282:	6053      	str	r3, [r2, #4]
		keyReg2[1] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000284:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000288:	4822      	ldr	r0, [pc, #136]	; (8000314 <getKeyInput2+0xa4>)
 800028a:	f002 f907 	bl	800249c <HAL_GPIO_ReadPin>
 800028e:	4603      	mov	r3, r0
 8000290:	461a      	mov	r2, r3
 8000292:	4b1f      	ldr	r3, [pc, #124]	; (8000310 <getKeyInput2+0xa0>)
 8000294:	605a      	str	r2, [r3, #4]
		if((keyReg0[1] == keyReg1[1]) && (keyReg1[1] == keyReg2[1])){
 8000296:	4b1d      	ldr	r3, [pc, #116]	; (800030c <getKeyInput2+0x9c>)
 8000298:	685a      	ldr	r2, [r3, #4]
 800029a:	4b1b      	ldr	r3, [pc, #108]	; (8000308 <getKeyInput2+0x98>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	429a      	cmp	r2, r3
 80002a0:	d130      	bne.n	8000304 <getKeyInput2+0x94>
 80002a2:	4b19      	ldr	r3, [pc, #100]	; (8000308 <getKeyInput2+0x98>)
 80002a4:	685a      	ldr	r2, [r3, #4]
 80002a6:	4b1a      	ldr	r3, [pc, #104]	; (8000310 <getKeyInput2+0xa0>)
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d12a      	bne.n	8000304 <getKeyInput2+0x94>
			if(keyReg3[1] != keyReg2[1]){
 80002ae:	4b1a      	ldr	r3, [pc, #104]	; (8000318 <getKeyInput2+0xa8>)
 80002b0:	685a      	ldr	r2, [r3, #4]
 80002b2:	4b17      	ldr	r3, [pc, #92]	; (8000310 <getKeyInput2+0xa0>)
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d00e      	beq.n	80002d8 <getKeyInput2+0x68>
				keyReg3[1] = keyReg2[1];
 80002ba:	4b15      	ldr	r3, [pc, #84]	; (8000310 <getKeyInput2+0xa0>)
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	4a16      	ldr	r2, [pc, #88]	; (8000318 <getKeyInput2+0xa8>)
 80002c0:	6053      	str	r3, [r2, #4]
				if(keyReg2[1] == PRESSED_STATE){
 80002c2:	4b13      	ldr	r3, [pc, #76]	; (8000310 <getKeyInput2+0xa0>)
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d11c      	bne.n	8000304 <getKeyInput2+0x94>
					button2_flag = 1;
 80002ca:	4b14      	ldr	r3, [pc, #80]	; (800031c <getKeyInput2+0xac>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	601a      	str	r2, [r3, #0]
					timerForKeyPress = 100;
 80002d0:	4b13      	ldr	r3, [pc, #76]	; (8000320 <getKeyInput2+0xb0>)
 80002d2:	2264      	movs	r2, #100	; 0x64
 80002d4:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 100;
					}
				}
			}
		}
}
 80002d6:	e015      	b.n	8000304 <getKeyInput2+0x94>
				if(keyReg2[1] == PRESSED_STATE){
 80002d8:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <getKeyInput2+0xa0>)
 80002da:	685b      	ldr	r3, [r3, #4]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d111      	bne.n	8000304 <getKeyInput2+0x94>
					timerForKeyPress--;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <getKeyInput2+0xb0>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	3b01      	subs	r3, #1
 80002e6:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <getKeyInput2+0xb0>)
 80002e8:	6013      	str	r3, [r2, #0]
					if(timerForKeyPress == 0){
 80002ea:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <getKeyInput2+0xb0>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d108      	bne.n	8000304 <getKeyInput2+0x94>
						button2_flag = 1;
 80002f2:	4b0a      	ldr	r3, [pc, #40]	; (800031c <getKeyInput2+0xac>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	601a      	str	r2, [r3, #0]
						button2_long_flag = 1;
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <getKeyInput2+0xb4>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 100;
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <getKeyInput2+0xb0>)
 8000300:	2264      	movs	r2, #100	; 0x64
 8000302:	601a      	str	r2, [r3, #0]
}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}
 8000308:	2000000c 	.word	0x2000000c
 800030c:	20000000 	.word	0x20000000
 8000310:	20000018 	.word	0x20000018
 8000314:	40010800 	.word	0x40010800
 8000318:	20000024 	.word	0x20000024
 800031c:	200000ac 	.word	0x200000ac
 8000320:	20000030 	.word	0x20000030
 8000324:	200000b8 	.word	0x200000b8

08000328 <getKeyInput3>:
void getKeyInput3(){
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
		keyReg0[2] = keyReg1[2];
 800032c:	4b24      	ldr	r3, [pc, #144]	; (80003c0 <getKeyInput3+0x98>)
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	4a24      	ldr	r2, [pc, #144]	; (80003c4 <getKeyInput3+0x9c>)
 8000332:	6093      	str	r3, [r2, #8]
		keyReg1[2] = keyReg2[2];
 8000334:	4b24      	ldr	r3, [pc, #144]	; (80003c8 <getKeyInput3+0xa0>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	4a21      	ldr	r2, [pc, #132]	; (80003c0 <getKeyInput3+0x98>)
 800033a:	6093      	str	r3, [r2, #8]
		keyReg2[2] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 800033c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000340:	4822      	ldr	r0, [pc, #136]	; (80003cc <getKeyInput3+0xa4>)
 8000342:	f002 f8ab 	bl	800249c <HAL_GPIO_ReadPin>
 8000346:	4603      	mov	r3, r0
 8000348:	461a      	mov	r2, r3
 800034a:	4b1f      	ldr	r3, [pc, #124]	; (80003c8 <getKeyInput3+0xa0>)
 800034c:	609a      	str	r2, [r3, #8]
		if((keyReg0[2] == keyReg1[2]) && (keyReg1[2] == keyReg2[2])){
 800034e:	4b1d      	ldr	r3, [pc, #116]	; (80003c4 <getKeyInput3+0x9c>)
 8000350:	689a      	ldr	r2, [r3, #8]
 8000352:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <getKeyInput3+0x98>)
 8000354:	689b      	ldr	r3, [r3, #8]
 8000356:	429a      	cmp	r2, r3
 8000358:	d130      	bne.n	80003bc <getKeyInput3+0x94>
 800035a:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <getKeyInput3+0x98>)
 800035c:	689a      	ldr	r2, [r3, #8]
 800035e:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <getKeyInput3+0xa0>)
 8000360:	689b      	ldr	r3, [r3, #8]
 8000362:	429a      	cmp	r2, r3
 8000364:	d12a      	bne.n	80003bc <getKeyInput3+0x94>
			if(keyReg3[2] != keyReg2[2]){
 8000366:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <getKeyInput3+0xa8>)
 8000368:	689a      	ldr	r2, [r3, #8]
 800036a:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <getKeyInput3+0xa0>)
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	429a      	cmp	r2, r3
 8000370:	d00e      	beq.n	8000390 <getKeyInput3+0x68>
				keyReg3[2] = keyReg2[2];
 8000372:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <getKeyInput3+0xa0>)
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	4a16      	ldr	r2, [pc, #88]	; (80003d0 <getKeyInput3+0xa8>)
 8000378:	6093      	str	r3, [r2, #8]
				if(keyReg2[2] == PRESSED_STATE){
 800037a:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <getKeyInput3+0xa0>)
 800037c:	689b      	ldr	r3, [r3, #8]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d11c      	bne.n	80003bc <getKeyInput3+0x94>
					button3_flag = 1;
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <getKeyInput3+0xac>)
 8000384:	2201      	movs	r2, #1
 8000386:	601a      	str	r2, [r3, #0]
					timerForKeyPress = 100;
 8000388:	4b13      	ldr	r3, [pc, #76]	; (80003d8 <getKeyInput3+0xb0>)
 800038a:	2264      	movs	r2, #100	; 0x64
 800038c:	601a      	str	r2, [r3, #0]
					}
				}
			}

		}
}
 800038e:	e015      	b.n	80003bc <getKeyInput3+0x94>
				if(keyReg2[2] == PRESSED_STATE){
 8000390:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <getKeyInput3+0xa0>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d111      	bne.n	80003bc <getKeyInput3+0x94>
					timerForKeyPress--;
 8000398:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <getKeyInput3+0xb0>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	3b01      	subs	r3, #1
 800039e:	4a0e      	ldr	r2, [pc, #56]	; (80003d8 <getKeyInput3+0xb0>)
 80003a0:	6013      	str	r3, [r2, #0]
					if(timerForKeyPress == 0){
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <getKeyInput3+0xb0>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d108      	bne.n	80003bc <getKeyInput3+0x94>
						button3_flag = 1;
 80003aa:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <getKeyInput3+0xac>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	601a      	str	r2, [r3, #0]
						button3_long_flag = 1;
 80003b0:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <getKeyInput3+0xb4>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 100;
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <getKeyInput3+0xb0>)
 80003b8:	2264      	movs	r2, #100	; 0x64
 80003ba:	601a      	str	r2, [r3, #0]
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	2000000c 	.word	0x2000000c
 80003c4:	20000000 	.word	0x20000000
 80003c8:	20000018 	.word	0x20000018
 80003cc:	40010800 	.word	0x40010800
 80003d0:	20000024 	.word	0x20000024
 80003d4:	200000b0 	.word	0x200000b0
 80003d8:	20000030 	.word	0x20000030
 80003dc:	200000bc 	.word	0x200000bc

080003e0 <display7SEG>:
#include "display7SEG.h"

void display7SEG(int num){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 80003e8:	2201      	movs	r2, #1
 80003ea:	2101      	movs	r1, #1
 80003ec:	489f      	ldr	r0, [pc, #636]	; (800066c <display7SEG+0x28c>)
 80003ee:	f002 f86c 	bl	80024ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2102      	movs	r1, #2
 80003f6:	489d      	ldr	r0, [pc, #628]	; (800066c <display7SEG+0x28c>)
 80003f8:	f002 f867 	bl	80024ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2104      	movs	r1, #4
 8000400:	489a      	ldr	r0, [pc, #616]	; (800066c <display7SEG+0x28c>)
 8000402:	f002 f862 	bl	80024ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000406:	2201      	movs	r2, #1
 8000408:	2108      	movs	r1, #8
 800040a:	4898      	ldr	r0, [pc, #608]	; (800066c <display7SEG+0x28c>)
 800040c:	f002 f85d 	bl	80024ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000410:	2201      	movs	r2, #1
 8000412:	2110      	movs	r1, #16
 8000414:	4895      	ldr	r0, [pc, #596]	; (800066c <display7SEG+0x28c>)
 8000416:	f002 f858 	bl	80024ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 800041a:	2201      	movs	r2, #1
 800041c:	2120      	movs	r1, #32
 800041e:	4893      	ldr	r0, [pc, #588]	; (800066c <display7SEG+0x28c>)
 8000420:	f002 f853 	bl	80024ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000424:	2201      	movs	r2, #1
 8000426:	2140      	movs	r1, #64	; 0x40
 8000428:	4890      	ldr	r0, [pc, #576]	; (800066c <display7SEG+0x28c>)
 800042a:	f002 f84e 	bl	80024ca <HAL_GPIO_WritePin>
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	2b09      	cmp	r3, #9
 8000432:	f200 8116 	bhi.w	8000662 <display7SEG+0x282>
 8000436:	a201      	add	r2, pc, #4	; (adr r2, 800043c <display7SEG+0x5c>)
 8000438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800043c:	08000465 	.word	0x08000465
 8000440:	080004a3 	.word	0x080004a3
 8000444:	080004b9 	.word	0x080004b9
 8000448:	080004ed 	.word	0x080004ed
 800044c:	08000521 	.word	0x08000521
 8000450:	0800054b 	.word	0x0800054b
 8000454:	0800057f 	.word	0x0800057f
 8000458:	080005bd 	.word	0x080005bd
 800045c:	080005dd 	.word	0x080005dd
 8000460:	08000625 	.word	0x08000625
	switch(num){
		case 0:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	2101      	movs	r1, #1
 8000468:	4880      	ldr	r0, [pc, #512]	; (800066c <display7SEG+0x28c>)
 800046a:	f002 f82e 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800046e:	2200      	movs	r2, #0
 8000470:	2102      	movs	r1, #2
 8000472:	487e      	ldr	r0, [pc, #504]	; (800066c <display7SEG+0x28c>)
 8000474:	f002 f829 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2104      	movs	r1, #4
 800047c:	487b      	ldr	r0, [pc, #492]	; (800066c <display7SEG+0x28c>)
 800047e:	f002 f824 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	2108      	movs	r1, #8
 8000486:	4879      	ldr	r0, [pc, #484]	; (800066c <display7SEG+0x28c>)
 8000488:	f002 f81f 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	2110      	movs	r1, #16
 8000490:	4876      	ldr	r0, [pc, #472]	; (800066c <display7SEG+0x28c>)
 8000492:	f002 f81a 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	2120      	movs	r1, #32
 800049a:	4874      	ldr	r0, [pc, #464]	; (800066c <display7SEG+0x28c>)
 800049c:	f002 f815 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 80004a0:	e0e0      	b.n	8000664 <display7SEG+0x284>
		case 1:
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2102      	movs	r1, #2
 80004a6:	4871      	ldr	r0, [pc, #452]	; (800066c <display7SEG+0x28c>)
 80004a8:	f002 f80f 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2104      	movs	r1, #4
 80004b0:	486e      	ldr	r0, [pc, #440]	; (800066c <display7SEG+0x28c>)
 80004b2:	f002 f80a 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 80004b6:	e0d5      	b.n	8000664 <display7SEG+0x284>
		case 2:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2101      	movs	r1, #1
 80004bc:	486b      	ldr	r0, [pc, #428]	; (800066c <display7SEG+0x28c>)
 80004be:	f002 f804 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2102      	movs	r1, #2
 80004c6:	4869      	ldr	r0, [pc, #420]	; (800066c <display7SEG+0x28c>)
 80004c8:	f001 ffff 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2108      	movs	r1, #8
 80004d0:	4866      	ldr	r0, [pc, #408]	; (800066c <display7SEG+0x28c>)
 80004d2:	f001 fffa 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2110      	movs	r1, #16
 80004da:	4864      	ldr	r0, [pc, #400]	; (800066c <display7SEG+0x28c>)
 80004dc:	f001 fff5 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2140      	movs	r1, #64	; 0x40
 80004e4:	4861      	ldr	r0, [pc, #388]	; (800066c <display7SEG+0x28c>)
 80004e6:	f001 fff0 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 80004ea:	e0bb      	b.n	8000664 <display7SEG+0x284>
		case 3:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	2101      	movs	r1, #1
 80004f0:	485e      	ldr	r0, [pc, #376]	; (800066c <display7SEG+0x28c>)
 80004f2:	f001 ffea 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2102      	movs	r1, #2
 80004fa:	485c      	ldr	r0, [pc, #368]	; (800066c <display7SEG+0x28c>)
 80004fc:	f001 ffe5 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	2104      	movs	r1, #4
 8000504:	4859      	ldr	r0, [pc, #356]	; (800066c <display7SEG+0x28c>)
 8000506:	f001 ffe0 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2108      	movs	r1, #8
 800050e:	4857      	ldr	r0, [pc, #348]	; (800066c <display7SEG+0x28c>)
 8000510:	f001 ffdb 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	2140      	movs	r1, #64	; 0x40
 8000518:	4854      	ldr	r0, [pc, #336]	; (800066c <display7SEG+0x28c>)
 800051a:	f001 ffd6 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 800051e:	e0a1      	b.n	8000664 <display7SEG+0x284>
		case 4:
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	2102      	movs	r1, #2
 8000524:	4851      	ldr	r0, [pc, #324]	; (800066c <display7SEG+0x28c>)
 8000526:	f001 ffd0 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	2104      	movs	r1, #4
 800052e:	484f      	ldr	r0, [pc, #316]	; (800066c <display7SEG+0x28c>)
 8000530:	f001 ffcb 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	2120      	movs	r1, #32
 8000538:	484c      	ldr	r0, [pc, #304]	; (800066c <display7SEG+0x28c>)
 800053a:	f001 ffc6 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	2140      	movs	r1, #64	; 0x40
 8000542:	484a      	ldr	r0, [pc, #296]	; (800066c <display7SEG+0x28c>)
 8000544:	f001 ffc1 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 8000548:	e08c      	b.n	8000664 <display7SEG+0x284>
		case 5:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2101      	movs	r1, #1
 800054e:	4847      	ldr	r0, [pc, #284]	; (800066c <display7SEG+0x28c>)
 8000550:	f001 ffbb 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2104      	movs	r1, #4
 8000558:	4844      	ldr	r0, [pc, #272]	; (800066c <display7SEG+0x28c>)
 800055a:	f001 ffb6 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2108      	movs	r1, #8
 8000562:	4842      	ldr	r0, [pc, #264]	; (800066c <display7SEG+0x28c>)
 8000564:	f001 ffb1 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2120      	movs	r1, #32
 800056c:	483f      	ldr	r0, [pc, #252]	; (800066c <display7SEG+0x28c>)
 800056e:	f001 ffac 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2140      	movs	r1, #64	; 0x40
 8000576:	483d      	ldr	r0, [pc, #244]	; (800066c <display7SEG+0x28c>)
 8000578:	f001 ffa7 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 800057c:	e072      	b.n	8000664 <display7SEG+0x284>
		case 6:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2101      	movs	r1, #1
 8000582:	483a      	ldr	r0, [pc, #232]	; (800066c <display7SEG+0x28c>)
 8000584:	f001 ffa1 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2104      	movs	r1, #4
 800058c:	4837      	ldr	r0, [pc, #220]	; (800066c <display7SEG+0x28c>)
 800058e:	f001 ff9c 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2108      	movs	r1, #8
 8000596:	4835      	ldr	r0, [pc, #212]	; (800066c <display7SEG+0x28c>)
 8000598:	f001 ff97 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2110      	movs	r1, #16
 80005a0:	4832      	ldr	r0, [pc, #200]	; (800066c <display7SEG+0x28c>)
 80005a2:	f001 ff92 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2120      	movs	r1, #32
 80005aa:	4830      	ldr	r0, [pc, #192]	; (800066c <display7SEG+0x28c>)
 80005ac:	f001 ff8d 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2140      	movs	r1, #64	; 0x40
 80005b4:	482d      	ldr	r0, [pc, #180]	; (800066c <display7SEG+0x28c>)
 80005b6:	f001 ff88 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 80005ba:	e053      	b.n	8000664 <display7SEG+0x284>
		case 7:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2101      	movs	r1, #1
 80005c0:	482a      	ldr	r0, [pc, #168]	; (800066c <display7SEG+0x28c>)
 80005c2:	f001 ff82 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2102      	movs	r1, #2
 80005ca:	4828      	ldr	r0, [pc, #160]	; (800066c <display7SEG+0x28c>)
 80005cc:	f001 ff7d 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2104      	movs	r1, #4
 80005d4:	4825      	ldr	r0, [pc, #148]	; (800066c <display7SEG+0x28c>)
 80005d6:	f001 ff78 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 80005da:	e043      	b.n	8000664 <display7SEG+0x284>
		case 8:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	2101      	movs	r1, #1
 80005e0:	4822      	ldr	r0, [pc, #136]	; (800066c <display7SEG+0x28c>)
 80005e2:	f001 ff72 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2102      	movs	r1, #2
 80005ea:	4820      	ldr	r0, [pc, #128]	; (800066c <display7SEG+0x28c>)
 80005ec:	f001 ff6d 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2104      	movs	r1, #4
 80005f4:	481d      	ldr	r0, [pc, #116]	; (800066c <display7SEG+0x28c>)
 80005f6:	f001 ff68 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2108      	movs	r1, #8
 80005fe:	481b      	ldr	r0, [pc, #108]	; (800066c <display7SEG+0x28c>)
 8000600:	f001 ff63 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2110      	movs	r1, #16
 8000608:	4818      	ldr	r0, [pc, #96]	; (800066c <display7SEG+0x28c>)
 800060a:	f001 ff5e 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	2120      	movs	r1, #32
 8000612:	4816      	ldr	r0, [pc, #88]	; (800066c <display7SEG+0x28c>)
 8000614:	f001 ff59 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2140      	movs	r1, #64	; 0x40
 800061c:	4813      	ldr	r0, [pc, #76]	; (800066c <display7SEG+0x28c>)
 800061e:	f001 ff54 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 8000622:	e01f      	b.n	8000664 <display7SEG+0x284>
		case 9:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2101      	movs	r1, #1
 8000628:	4810      	ldr	r0, [pc, #64]	; (800066c <display7SEG+0x28c>)
 800062a:	f001 ff4e 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2102      	movs	r1, #2
 8000632:	480e      	ldr	r0, [pc, #56]	; (800066c <display7SEG+0x28c>)
 8000634:	f001 ff49 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2104      	movs	r1, #4
 800063c:	480b      	ldr	r0, [pc, #44]	; (800066c <display7SEG+0x28c>)
 800063e:	f001 ff44 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	4809      	ldr	r0, [pc, #36]	; (800066c <display7SEG+0x28c>)
 8000648:	f001 ff3f 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2120      	movs	r1, #32
 8000650:	4806      	ldr	r0, [pc, #24]	; (800066c <display7SEG+0x28c>)
 8000652:	f001 ff3a 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2140      	movs	r1, #64	; 0x40
 800065a:	4804      	ldr	r0, [pc, #16]	; (800066c <display7SEG+0x28c>)
 800065c:	f001 ff35 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 8000660:	e000      	b.n	8000664 <display7SEG+0x284>
		default:
			break;
 8000662:	bf00      	nop
	}
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40010c00 	.word	0x40010c00

08000670 <display7SEG_2>:

void display7SEG_2(int num){
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(aa_GPIO_Port, aa_Pin, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800067e:	48bc      	ldr	r0, [pc, #752]	; (8000970 <display7SEG_2+0x300>)
 8000680:	f001 ff23 	bl	80024ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(bb_GPIO_Port, bb_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800068a:	48b9      	ldr	r0, [pc, #740]	; (8000970 <display7SEG_2+0x300>)
 800068c:	f001 ff1d 	bl	80024ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(cc_GPIO_Port, cc_Pin, GPIO_PIN_SET);
 8000690:	2201      	movs	r2, #1
 8000692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000696:	48b6      	ldr	r0, [pc, #728]	; (8000970 <display7SEG_2+0x300>)
 8000698:	f001 ff17 	bl	80024ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(dd_GPIO_Port, dd_Pin, GPIO_PIN_SET);
 800069c:	2201      	movs	r2, #1
 800069e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a2:	48b3      	ldr	r0, [pc, #716]	; (8000970 <display7SEG_2+0x300>)
 80006a4:	f001 ff11 	bl	80024ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ee_GPIO_Port, ee_Pin, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ae:	48b0      	ldr	r0, [pc, #704]	; (8000970 <display7SEG_2+0x300>)
 80006b0:	f001 ff0b 	bl	80024ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ff_GPIO_Port, ff_Pin, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ba:	48ae      	ldr	r0, [pc, #696]	; (8000974 <display7SEG_2+0x304>)
 80006bc:	f001 ff05 	bl	80024ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gg_GPIO_Port, gg_Pin, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c6:	48ab      	ldr	r0, [pc, #684]	; (8000974 <display7SEG_2+0x304>)
 80006c8:	f001 feff 	bl	80024ca <HAL_GPIO_WritePin>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b09      	cmp	r3, #9
 80006d0:	f200 8148 	bhi.w	8000964 <display7SEG_2+0x2f4>
 80006d4:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <display7SEG_2+0x6c>)
 80006d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006da:	bf00      	nop
 80006dc:	08000705 	.word	0x08000705
 80006e0:	0800074f 	.word	0x0800074f
 80006e4:	08000769 	.word	0x08000769
 80006e8:	080007a7 	.word	0x080007a7
 80006ec:	080007e5 	.word	0x080007e5
 80006f0:	08000817 	.word	0x08000817
 80006f4:	08000855 	.word	0x08000855
 80006f8:	0800089f 	.word	0x0800089f
 80006fc:	080008c5 	.word	0x080008c5
 8000700:	0800091b 	.word	0x0800091b
	switch(num){
		case 0:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800070a:	4899      	ldr	r0, [pc, #612]	; (8000970 <display7SEG_2+0x300>)
 800070c:	f001 fedd 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000716:	4896      	ldr	r0, [pc, #600]	; (8000970 <display7SEG_2+0x300>)
 8000718:	f001 fed7 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000722:	4893      	ldr	r0, [pc, #588]	; (8000970 <display7SEG_2+0x300>)
 8000724:	f001 fed1 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dd_GPIO_Port,dd_Pin,GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072e:	4890      	ldr	r0, [pc, #576]	; (8000970 <display7SEG_2+0x300>)
 8000730:	f001 fecb 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ee_GPIO_Port,ee_Pin,GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800073a:	488d      	ldr	r0, [pc, #564]	; (8000970 <display7SEG_2+0x300>)
 800073c:	f001 fec5 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ff_GPIO_Port,ff_Pin,GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000746:	488b      	ldr	r0, [pc, #556]	; (8000974 <display7SEG_2+0x304>)
 8000748:	f001 febf 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 800074c:	e10b      	b.n	8000966 <display7SEG_2+0x2f6>
		case 1:
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000754:	4886      	ldr	r0, [pc, #536]	; (8000970 <display7SEG_2+0x300>)
 8000756:	f001 feb8 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000760:	4883      	ldr	r0, [pc, #524]	; (8000970 <display7SEG_2+0x300>)
 8000762:	f001 feb2 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 8000766:	e0fe      	b.n	8000966 <display7SEG_2+0x2f6>
		case 2:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800076e:	4880      	ldr	r0, [pc, #512]	; (8000970 <display7SEG_2+0x300>)
 8000770:	f001 feab 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800077a:	487d      	ldr	r0, [pc, #500]	; (8000970 <display7SEG_2+0x300>)
 800077c:	f001 fea5 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dd_GPIO_Port,dd_Pin,GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000786:	487a      	ldr	r0, [pc, #488]	; (8000970 <display7SEG_2+0x300>)
 8000788:	f001 fe9f 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ee_GPIO_Port,ee_Pin,GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000792:	4877      	ldr	r0, [pc, #476]	; (8000970 <display7SEG_2+0x300>)
 8000794:	f001 fe99 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gg_GPIO_Port,gg_Pin,GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079e:	4875      	ldr	r0, [pc, #468]	; (8000974 <display7SEG_2+0x304>)
 80007a0:	f001 fe93 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 80007a4:	e0df      	b.n	8000966 <display7SEG_2+0x2f6>
		case 3:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ac:	4870      	ldr	r0, [pc, #448]	; (8000970 <display7SEG_2+0x300>)
 80007ae:	f001 fe8c 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b8:	486d      	ldr	r0, [pc, #436]	; (8000970 <display7SEG_2+0x300>)
 80007ba:	f001 fe86 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c4:	486a      	ldr	r0, [pc, #424]	; (8000970 <display7SEG_2+0x300>)
 80007c6:	f001 fe80 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dd_GPIO_Port,dd_Pin,GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d0:	4867      	ldr	r0, [pc, #412]	; (8000970 <display7SEG_2+0x300>)
 80007d2:	f001 fe7a 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gg_GPIO_Port,gg_Pin,GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007dc:	4865      	ldr	r0, [pc, #404]	; (8000974 <display7SEG_2+0x304>)
 80007de:	f001 fe74 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 80007e2:	e0c0      	b.n	8000966 <display7SEG_2+0x2f6>
		case 4:
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ea:	4861      	ldr	r0, [pc, #388]	; (8000970 <display7SEG_2+0x300>)
 80007ec:	f001 fe6d 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f6:	485e      	ldr	r0, [pc, #376]	; (8000970 <display7SEG_2+0x300>)
 80007f8:	f001 fe67 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ff_GPIO_Port,ff_Pin,GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000802:	485c      	ldr	r0, [pc, #368]	; (8000974 <display7SEG_2+0x304>)
 8000804:	f001 fe61 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gg_GPIO_Port,gg_Pin,GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080e:	4859      	ldr	r0, [pc, #356]	; (8000974 <display7SEG_2+0x304>)
 8000810:	f001 fe5b 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 8000814:	e0a7      	b.n	8000966 <display7SEG_2+0x2f6>
		case 5:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800081c:	4854      	ldr	r0, [pc, #336]	; (8000970 <display7SEG_2+0x300>)
 800081e:	f001 fe54 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000828:	4851      	ldr	r0, [pc, #324]	; (8000970 <display7SEG_2+0x300>)
 800082a:	f001 fe4e 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dd_GPIO_Port,dd_Pin,GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000834:	484e      	ldr	r0, [pc, #312]	; (8000970 <display7SEG_2+0x300>)
 8000836:	f001 fe48 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ff_GPIO_Port,ff_Pin,GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000840:	484c      	ldr	r0, [pc, #304]	; (8000974 <display7SEG_2+0x304>)
 8000842:	f001 fe42 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gg_GPIO_Port,gg_Pin,GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084c:	4849      	ldr	r0, [pc, #292]	; (8000974 <display7SEG_2+0x304>)
 800084e:	f001 fe3c 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 8000852:	e088      	b.n	8000966 <display7SEG_2+0x2f6>
		case 6:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800085a:	4845      	ldr	r0, [pc, #276]	; (8000970 <display7SEG_2+0x300>)
 800085c:	f001 fe35 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000866:	4842      	ldr	r0, [pc, #264]	; (8000970 <display7SEG_2+0x300>)
 8000868:	f001 fe2f 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dd_GPIO_Port,dd_Pin,GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000872:	483f      	ldr	r0, [pc, #252]	; (8000970 <display7SEG_2+0x300>)
 8000874:	f001 fe29 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ee_GPIO_Port,ee_Pin,GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800087e:	483c      	ldr	r0, [pc, #240]	; (8000970 <display7SEG_2+0x300>)
 8000880:	f001 fe23 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ff_GPIO_Port,ff_Pin,GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088a:	483a      	ldr	r0, [pc, #232]	; (8000974 <display7SEG_2+0x304>)
 800088c:	f001 fe1d 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gg_GPIO_Port,gg_Pin,GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000896:	4837      	ldr	r0, [pc, #220]	; (8000974 <display7SEG_2+0x304>)
 8000898:	f001 fe17 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 800089c:	e063      	b.n	8000966 <display7SEG_2+0x2f6>
		case 7:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a4:	4832      	ldr	r0, [pc, #200]	; (8000970 <display7SEG_2+0x300>)
 80008a6:	f001 fe10 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b0:	482f      	ldr	r0, [pc, #188]	; (8000970 <display7SEG_2+0x300>)
 80008b2:	f001 fe0a 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008bc:	482c      	ldr	r0, [pc, #176]	; (8000970 <display7SEG_2+0x300>)
 80008be:	f001 fe04 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 80008c2:	e050      	b.n	8000966 <display7SEG_2+0x2f6>
		case 8:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ca:	4829      	ldr	r0, [pc, #164]	; (8000970 <display7SEG_2+0x300>)
 80008cc:	f001 fdfd 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d6:	4826      	ldr	r0, [pc, #152]	; (8000970 <display7SEG_2+0x300>)
 80008d8:	f001 fdf7 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e2:	4823      	ldr	r0, [pc, #140]	; (8000970 <display7SEG_2+0x300>)
 80008e4:	f001 fdf1 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dd_GPIO_Port,dd_Pin,GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ee:	4820      	ldr	r0, [pc, #128]	; (8000970 <display7SEG_2+0x300>)
 80008f0:	f001 fdeb 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ee_GPIO_Port,ee_Pin,GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008fa:	481d      	ldr	r0, [pc, #116]	; (8000970 <display7SEG_2+0x300>)
 80008fc:	f001 fde5 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ff_GPIO_Port,ff_Pin,GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000906:	481b      	ldr	r0, [pc, #108]	; (8000974 <display7SEG_2+0x304>)
 8000908:	f001 fddf 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gg_GPIO_Port,gg_Pin,GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000912:	4818      	ldr	r0, [pc, #96]	; (8000974 <display7SEG_2+0x304>)
 8000914:	f001 fdd9 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 8000918:	e025      	b.n	8000966 <display7SEG_2+0x2f6>
		case 9:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000920:	4813      	ldr	r0, [pc, #76]	; (8000970 <display7SEG_2+0x300>)
 8000922:	f001 fdd2 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092c:	4810      	ldr	r0, [pc, #64]	; (8000970 <display7SEG_2+0x300>)
 800092e:	f001 fdcc 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <display7SEG_2+0x300>)
 800093a:	f001 fdc6 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dd_GPIO_Port,dd_Pin,GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000944:	480a      	ldr	r0, [pc, #40]	; (8000970 <display7SEG_2+0x300>)
 8000946:	f001 fdc0 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ff_GPIO_Port,ff_Pin,GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000950:	4808      	ldr	r0, [pc, #32]	; (8000974 <display7SEG_2+0x304>)
 8000952:	f001 fdba 	bl	80024ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gg_GPIO_Port,gg_Pin,GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <display7SEG_2+0x304>)
 800095e:	f001 fdb4 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 8000962:	e000      	b.n	8000966 <display7SEG_2+0x2f6>
		default:

			break;
 8000964:	bf00      	nop
	}
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40010800 	.word	0x40010800
 8000974:	40010c00 	.word	0x40010c00

08000978 <update7SEG>:
//
//int value1_buffer[3] = {0,0,0};
//int value2_buffer[3] = {0,0,0};


void update7SEG(int index_lane1){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	switch(index_lane1){
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d003      	beq.n	800098e <update7SEG+0x16>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d012      	beq.n	80009b2 <update7SEG+0x3a>
			  display7SEG(led_buffer_lane1[1]);
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
			  break;
		}
}
 800098c:	e023      	b.n	80009d6 <update7SEG+0x5e>
			  display7SEG(led_buffer_lane1[0]);
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <update7SEG+0x68>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fd24 	bl	80003e0 <display7SEG>
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099e:	4811      	ldr	r0, [pc, #68]	; (80009e4 <update7SEG+0x6c>)
 80009a0:	f001 fd93 	bl	80024ca <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009aa:	480e      	ldr	r0, [pc, #56]	; (80009e4 <update7SEG+0x6c>)
 80009ac:	f001 fd8d 	bl	80024ca <HAL_GPIO_WritePin>
			  break;
 80009b0:	e011      	b.n	80009d6 <update7SEG+0x5e>
			  display7SEG(led_buffer_lane1[1]);
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <update7SEG+0x68>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fd12 	bl	80003e0 <display7SEG>
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c2:	4808      	ldr	r0, [pc, #32]	; (80009e4 <update7SEG+0x6c>)
 80009c4:	f001 fd81 	bl	80024ca <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <update7SEG+0x6c>)
 80009d0:	f001 fd7b 	bl	80024ca <HAL_GPIO_WritePin>
			  break;
 80009d4:	bf00      	nop
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200000c8 	.word	0x200000c8
 80009e4:	40010c00 	.word	0x40010c00

080009e8 <update7SEG_lane2>:

void update7SEG_lane2(int index_lane2){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	switch(index_lane2){
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d003      	beq.n	80009fe <update7SEG_lane2+0x16>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d012      	beq.n	8000a22 <update7SEG_lane2+0x3a>
			  display7SEG_2(led_buffer_lane2[1]);
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
			  break;
		}
}
 80009fc:	e023      	b.n	8000a46 <update7SEG_lane2+0x5e>
			  display7SEG_2(led_buffer_lane2[0]);
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <update7SEG_lane2+0x68>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fe34 	bl	8000670 <display7SEG_2>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a0e:	4811      	ldr	r0, [pc, #68]	; (8000a54 <update7SEG_lane2+0x6c>)
 8000a10:	f001 fd5b 	bl	80024ca <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a1a:	480e      	ldr	r0, [pc, #56]	; (8000a54 <update7SEG_lane2+0x6c>)
 8000a1c:	f001 fd55 	bl	80024ca <HAL_GPIO_WritePin>
			  break;
 8000a20:	e011      	b.n	8000a46 <update7SEG_lane2+0x5e>
			  display7SEG_2(led_buffer_lane2[1]);
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <update7SEG_lane2+0x68>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fe22 	bl	8000670 <display7SEG_2>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a32:	4808      	ldr	r0, [pc, #32]	; (8000a54 <update7SEG_lane2+0x6c>)
 8000a34:	f001 fd49 	bl	80024ca <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <update7SEG_lane2+0x6c>)
 8000a40:	f001 fd43 	bl	80024ca <HAL_GPIO_WritePin>
			  break;
 8000a44:	bf00      	nop
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200000d0 	.word	0x200000d0
 8000a54:	40010c00 	.word	0x40010c00

08000a58 <fsm_auto_run_lane1>:
#include "fsm_auto.h"
#include "traffic_2_lane.h"
int status_lane1 = INIT_1;
int status_lane2 = INIT_2;

void fsm_auto_run_lane1(){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	switch (status_lane1) {
 8000a5c:	4b8b      	ldr	r3, [pc, #556]	; (8000c8c <fsm_auto_run_lane1+0x234>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	3b0a      	subs	r3, #10
 8000a62:	2b03      	cmp	r3, #3
 8000a64:	f200 8108 	bhi.w	8000c78 <fsm_auto_run_lane1+0x220>
 8000a68:	a201      	add	r2, pc, #4	; (adr r2, 8000a70 <fsm_auto_run_lane1+0x18>)
 8000a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6e:	bf00      	nop
 8000a70:	08000a81 	.word	0x08000a81
 8000a74:	08000aaf 	.word	0x08000aaf
 8000a78:	08000b49 	.word	0x08000b49
 8000a7c:	08000be1 	.word	0x08000be1
		case INIT_1:
			status_lane1 = RED_1;
 8000a80:	4b82      	ldr	r3, [pc, #520]	; (8000c8c <fsm_auto_run_lane1+0x234>)
 8000a82:	220b      	movs	r2, #11
 8000a84:	601a      	str	r2, [r3, #0]
			value1_buffer[0] = red1TimeMAX*1000;
 8000a86:	4b82      	ldr	r3, [pc, #520]	; (8000c90 <fsm_auto_run_lane1+0x238>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a8e:	fb02 f303 	mul.w	r3, r2, r3
 8000a92:	4a80      	ldr	r2, [pc, #512]	; (8000c94 <fsm_auto_run_lane1+0x23c>)
 8000a94:	6013      	str	r3, [r2, #0]
			setTimer(1, value1_buffer[0]);
 8000a96:	4b7f      	ldr	r3, [pc, #508]	; (8000c94 <fsm_auto_run_lane1+0x23c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f001 f813 	bl	8001ac8 <setTimer>
			setTimer(3, 1000);
 8000aa2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aa6:	2003      	movs	r0, #3
 8000aa8:	f001 f80e 	bl	8001ac8 <setTimer>
			break;
 8000aac:	e0eb      	b.n	8000c86 <fsm_auto_run_lane1+0x22e>
		case RED_1:
			red_1();
 8000aae:	f001 f901 	bl	8001cb4 <red_1>
			led_buffer_lane1[0] = red1_time/10;
 8000ab2:	4b79      	ldr	r3, [pc, #484]	; (8000c98 <fsm_auto_run_lane1+0x240>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a79      	ldr	r2, [pc, #484]	; (8000c9c <fsm_auto_run_lane1+0x244>)
 8000ab8:	fb82 1203 	smull	r1, r2, r2, r3
 8000abc:	1092      	asrs	r2, r2, #2
 8000abe:	17db      	asrs	r3, r3, #31
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	4a77      	ldr	r2, [pc, #476]	; (8000ca0 <fsm_auto_run_lane1+0x248>)
 8000ac4:	6013      	str	r3, [r2, #0]
			led_buffer_lane1[1] = red1_time%10;
 8000ac6:	4b74      	ldr	r3, [pc, #464]	; (8000c98 <fsm_auto_run_lane1+0x240>)
 8000ac8:	6819      	ldr	r1, [r3, #0]
 8000aca:	4b74      	ldr	r3, [pc, #464]	; (8000c9c <fsm_auto_run_lane1+0x244>)
 8000acc:	fb83 2301 	smull	r2, r3, r3, r1
 8000ad0:	109a      	asrs	r2, r3, #2
 8000ad2:	17cb      	asrs	r3, r1, #31
 8000ad4:	1ad2      	subs	r2, r2, r3
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	4413      	add	r3, r2
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	1aca      	subs	r2, r1, r3
 8000ae0:	4b6f      	ldr	r3, [pc, #444]	; (8000ca0 <fsm_auto_run_lane1+0x248>)
 8000ae2:	605a      	str	r2, [r3, #4]
			if(timer_flag[3] == 1){
 8000ae4:	4b6f      	ldr	r3, [pc, #444]	; (8000ca4 <fsm_auto_run_lane1+0x24c>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d111      	bne.n	8000b10 <fsm_auto_run_lane1+0xb8>
				red1_time--;
 8000aec:	4b6a      	ldr	r3, [pc, #424]	; (8000c98 <fsm_auto_run_lane1+0x240>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	3b01      	subs	r3, #1
 8000af2:	4a69      	ldr	r2, [pc, #420]	; (8000c98 <fsm_auto_run_lane1+0x240>)
 8000af4:	6013      	str	r3, [r2, #0]
				if(red1_time==0){
 8000af6:	4b68      	ldr	r3, [pc, #416]	; (8000c98 <fsm_auto_run_lane1+0x240>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d103      	bne.n	8000b06 <fsm_auto_run_lane1+0xae>
					red1_time = red1TimeMAX;
 8000afe:	4b64      	ldr	r3, [pc, #400]	; (8000c90 <fsm_auto_run_lane1+0x238>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a65      	ldr	r2, [pc, #404]	; (8000c98 <fsm_auto_run_lane1+0x240>)
 8000b04:	6013      	str	r3, [r2, #0]
				}
				setTimer(3, 1000);
 8000b06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b0a:	2003      	movs	r0, #3
 8000b0c:	f000 ffdc 	bl	8001ac8 <setTimer>
			}
			if(timer_flag[1] == 1){
 8000b10:	4b64      	ldr	r3, [pc, #400]	; (8000ca4 <fsm_auto_run_lane1+0x24c>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	f040 80b1 	bne.w	8000c7c <fsm_auto_run_lane1+0x224>
				status_lane1 = GREEN_1;
 8000b1a:	4b5c      	ldr	r3, [pc, #368]	; (8000c8c <fsm_auto_run_lane1+0x234>)
 8000b1c:	220c      	movs	r2, #12
 8000b1e:	601a      	str	r2, [r3, #0]
				value1_buffer[1] = green1TimeMAX*1000;
 8000b20:	4b61      	ldr	r3, [pc, #388]	; (8000ca8 <fsm_auto_run_lane1+0x250>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b28:	fb02 f303 	mul.w	r3, r2, r3
 8000b2c:	4a59      	ldr	r2, [pc, #356]	; (8000c94 <fsm_auto_run_lane1+0x23c>)
 8000b2e:	6053      	str	r3, [r2, #4]
				setTimer(1, value1_buffer[1]);
 8000b30:	4b58      	ldr	r3, [pc, #352]	; (8000c94 <fsm_auto_run_lane1+0x23c>)
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	4619      	mov	r1, r3
 8000b36:	2001      	movs	r0, #1
 8000b38:	f000 ffc6 	bl	8001ac8 <setTimer>
				setTimer(3, 1000);
 8000b3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b40:	2003      	movs	r0, #3
 8000b42:	f000 ffc1 	bl	8001ac8 <setTimer>
			}
			break;
 8000b46:	e099      	b.n	8000c7c <fsm_auto_run_lane1+0x224>
		case GREEN_1:
			green_1();
 8000b48:	f001 f8ca 	bl	8001ce0 <green_1>
			led_buffer_lane1[0] = green1_time/10;
 8000b4c:	4b57      	ldr	r3, [pc, #348]	; (8000cac <fsm_auto_run_lane1+0x254>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a52      	ldr	r2, [pc, #328]	; (8000c9c <fsm_auto_run_lane1+0x244>)
 8000b52:	fb82 1203 	smull	r1, r2, r2, r3
 8000b56:	1092      	asrs	r2, r2, #2
 8000b58:	17db      	asrs	r3, r3, #31
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	4a50      	ldr	r2, [pc, #320]	; (8000ca0 <fsm_auto_run_lane1+0x248>)
 8000b5e:	6013      	str	r3, [r2, #0]
			led_buffer_lane1[1] = green1_time%10;
 8000b60:	4b52      	ldr	r3, [pc, #328]	; (8000cac <fsm_auto_run_lane1+0x254>)
 8000b62:	6819      	ldr	r1, [r3, #0]
 8000b64:	4b4d      	ldr	r3, [pc, #308]	; (8000c9c <fsm_auto_run_lane1+0x244>)
 8000b66:	fb83 2301 	smull	r2, r3, r3, r1
 8000b6a:	109a      	asrs	r2, r3, #2
 8000b6c:	17cb      	asrs	r3, r1, #31
 8000b6e:	1ad2      	subs	r2, r2, r3
 8000b70:	4613      	mov	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	1aca      	subs	r2, r1, r3
 8000b7a:	4b49      	ldr	r3, [pc, #292]	; (8000ca0 <fsm_auto_run_lane1+0x248>)
 8000b7c:	605a      	str	r2, [r3, #4]
			if(timer_flag[3] == 1){
 8000b7e:	4b49      	ldr	r3, [pc, #292]	; (8000ca4 <fsm_auto_run_lane1+0x24c>)
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d111      	bne.n	8000baa <fsm_auto_run_lane1+0x152>
				green1_time--;
 8000b86:	4b49      	ldr	r3, [pc, #292]	; (8000cac <fsm_auto_run_lane1+0x254>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	4a47      	ldr	r2, [pc, #284]	; (8000cac <fsm_auto_run_lane1+0x254>)
 8000b8e:	6013      	str	r3, [r2, #0]
				if(green1_time == 0){
 8000b90:	4b46      	ldr	r3, [pc, #280]	; (8000cac <fsm_auto_run_lane1+0x254>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d103      	bne.n	8000ba0 <fsm_auto_run_lane1+0x148>
					green1_time = green1TimeMAX;
 8000b98:	4b43      	ldr	r3, [pc, #268]	; (8000ca8 <fsm_auto_run_lane1+0x250>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a43      	ldr	r2, [pc, #268]	; (8000cac <fsm_auto_run_lane1+0x254>)
 8000b9e:	6013      	str	r3, [r2, #0]
				}
				setTimer(3, 1000);
 8000ba0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 ff8f 	bl	8001ac8 <setTimer>
			}
			if(timer_flag[1] == 1){
 8000baa:	4b3e      	ldr	r3, [pc, #248]	; (8000ca4 <fsm_auto_run_lane1+0x24c>)
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d166      	bne.n	8000c80 <fsm_auto_run_lane1+0x228>
				status_lane1 = YELLOW_1;
 8000bb2:	4b36      	ldr	r3, [pc, #216]	; (8000c8c <fsm_auto_run_lane1+0x234>)
 8000bb4:	220d      	movs	r2, #13
 8000bb6:	601a      	str	r2, [r3, #0]
				value1_buffer[2] = yellow1TimeMAX*1000;
 8000bb8:	4b3d      	ldr	r3, [pc, #244]	; (8000cb0 <fsm_auto_run_lane1+0x258>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bc0:	fb02 f303 	mul.w	r3, r2, r3
 8000bc4:	4a33      	ldr	r2, [pc, #204]	; (8000c94 <fsm_auto_run_lane1+0x23c>)
 8000bc6:	6093      	str	r3, [r2, #8]
				setTimer(1, value1_buffer[2]);
 8000bc8:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <fsm_auto_run_lane1+0x23c>)
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f000 ff7a 	bl	8001ac8 <setTimer>
				setTimer(3, 1000);
 8000bd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 ff75 	bl	8001ac8 <setTimer>
			}
			break;
 8000bde:	e04f      	b.n	8000c80 <fsm_auto_run_lane1+0x228>
		case YELLOW_1:
			yellow_1();
 8000be0:	f001 f894 	bl	8001d0c <yellow_1>
			led_buffer_lane1[0] = yellow1_time/10;
 8000be4:	4b33      	ldr	r3, [pc, #204]	; (8000cb4 <fsm_auto_run_lane1+0x25c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a2c      	ldr	r2, [pc, #176]	; (8000c9c <fsm_auto_run_lane1+0x244>)
 8000bea:	fb82 1203 	smull	r1, r2, r2, r3
 8000bee:	1092      	asrs	r2, r2, #2
 8000bf0:	17db      	asrs	r3, r3, #31
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	4a2a      	ldr	r2, [pc, #168]	; (8000ca0 <fsm_auto_run_lane1+0x248>)
 8000bf6:	6013      	str	r3, [r2, #0]
			led_buffer_lane1[1] = yellow1_time%10;
 8000bf8:	4b2e      	ldr	r3, [pc, #184]	; (8000cb4 <fsm_auto_run_lane1+0x25c>)
 8000bfa:	6819      	ldr	r1, [r3, #0]
 8000bfc:	4b27      	ldr	r3, [pc, #156]	; (8000c9c <fsm_auto_run_lane1+0x244>)
 8000bfe:	fb83 2301 	smull	r2, r3, r3, r1
 8000c02:	109a      	asrs	r2, r3, #2
 8000c04:	17cb      	asrs	r3, r1, #31
 8000c06:	1ad2      	subs	r2, r2, r3
 8000c08:	4613      	mov	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4413      	add	r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	1aca      	subs	r2, r1, r3
 8000c12:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <fsm_auto_run_lane1+0x248>)
 8000c14:	605a      	str	r2, [r3, #4]
			if(timer_flag[3] == 1){
 8000c16:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <fsm_auto_run_lane1+0x24c>)
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d111      	bne.n	8000c42 <fsm_auto_run_lane1+0x1ea>
				yellow1_time--;
 8000c1e:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <fsm_auto_run_lane1+0x25c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	4a23      	ldr	r2, [pc, #140]	; (8000cb4 <fsm_auto_run_lane1+0x25c>)
 8000c26:	6013      	str	r3, [r2, #0]
				if(yellow1_time==0){
 8000c28:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <fsm_auto_run_lane1+0x25c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d103      	bne.n	8000c38 <fsm_auto_run_lane1+0x1e0>
					yellow1_time = yellow1TimeMAX;
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <fsm_auto_run_lane1+0x258>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a1f      	ldr	r2, [pc, #124]	; (8000cb4 <fsm_auto_run_lane1+0x25c>)
 8000c36:	6013      	str	r3, [r2, #0]
				}
				setTimer(3, 1000);
 8000c38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f000 ff43 	bl	8001ac8 <setTimer>
			}
			if(timer_flag[1] == 1){
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <fsm_auto_run_lane1+0x24c>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d11c      	bne.n	8000c84 <fsm_auto_run_lane1+0x22c>
				status_lane1 = RED_1;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <fsm_auto_run_lane1+0x234>)
 8000c4c:	220b      	movs	r2, #11
 8000c4e:	601a      	str	r2, [r3, #0]
				value1_buffer[0] = red1TimeMAX*1000;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <fsm_auto_run_lane1+0x238>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c58:	fb02 f303 	mul.w	r3, r2, r3
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <fsm_auto_run_lane1+0x23c>)
 8000c5e:	6013      	str	r3, [r2, #0]
				setTimer(1, value1_buffer[0]);
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <fsm_auto_run_lane1+0x23c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	f000 ff2e 	bl	8001ac8 <setTimer>
				setTimer(3, 1000);
 8000c6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c70:	2003      	movs	r0, #3
 8000c72:	f000 ff29 	bl	8001ac8 <setTimer>
			}
			break;
 8000c76:	e005      	b.n	8000c84 <fsm_auto_run_lane1+0x22c>
		default:
			break;
 8000c78:	bf00      	nop
 8000c7a:	e004      	b.n	8000c86 <fsm_auto_run_lane1+0x22e>
			break;
 8000c7c:	bf00      	nop
 8000c7e:	e002      	b.n	8000c86 <fsm_auto_run_lane1+0x22e>
			break;
 8000c80:	bf00      	nop
 8000c82:	e000      	b.n	8000c86 <fsm_auto_run_lane1+0x22e>
			break;
 8000c84:	bf00      	nop
	}
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000034 	.word	0x20000034
 8000c90:	2000004c 	.word	0x2000004c
 8000c94:	200000d8 	.word	0x200000d8
 8000c98:	20000064 	.word	0x20000064
 8000c9c:	66666667 	.word	0x66666667
 8000ca0:	200000c8 	.word	0x200000c8
 8000ca4:	2000011c 	.word	0x2000011c
 8000ca8:	20000050 	.word	0x20000050
 8000cac:	20000068 	.word	0x20000068
 8000cb0:	20000054 	.word	0x20000054
 8000cb4:	2000006c 	.word	0x2000006c

08000cb8 <fsm_auto_run_lane2>:

void fsm_auto_run_lane2(){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	switch (status_lane2) {
 8000cbc:	4b8b      	ldr	r3, [pc, #556]	; (8000eec <fsm_auto_run_lane2+0x234>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	3b0e      	subs	r3, #14
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	f200 8108 	bhi.w	8000ed8 <fsm_auto_run_lane2+0x220>
 8000cc8:	a201      	add	r2, pc, #4	; (adr r2, 8000cd0 <fsm_auto_run_lane2+0x18>)
 8000cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cce:	bf00      	nop
 8000cd0:	08000ce1 	.word	0x08000ce1
 8000cd4:	08000e41 	.word	0x08000e41
 8000cd8:	08000d0f 	.word	0x08000d0f
 8000cdc:	08000da9 	.word	0x08000da9
		case INIT_2:
			status_lane2 = GREEN_2;
 8000ce0:	4b82      	ldr	r3, [pc, #520]	; (8000eec <fsm_auto_run_lane2+0x234>)
 8000ce2:	2210      	movs	r2, #16
 8000ce4:	601a      	str	r2, [r3, #0]
			value2_buffer[0] = green2TimeMAX*1000;
 8000ce6:	4b82      	ldr	r3, [pc, #520]	; (8000ef0 <fsm_auto_run_lane2+0x238>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cee:	fb02 f303 	mul.w	r3, r2, r3
 8000cf2:	4a80      	ldr	r2, [pc, #512]	; (8000ef4 <fsm_auto_run_lane2+0x23c>)
 8000cf4:	6013      	str	r3, [r2, #0]
			setTimer(2, value2_buffer[0]);
 8000cf6:	4b7f      	ldr	r3, [pc, #508]	; (8000ef4 <fsm_auto_run_lane2+0x23c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	2002      	movs	r0, #2
 8000cfe:	f000 fee3 	bl	8001ac8 <setTimer>
			setTimer(5, 1000);
 8000d02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d06:	2005      	movs	r0, #5
 8000d08:	f000 fede 	bl	8001ac8 <setTimer>
			break;
 8000d0c:	e0eb      	b.n	8000ee6 <fsm_auto_run_lane2+0x22e>
		case GREEN_2:
			green_2();
 8000d0e:	f001 f829 	bl	8001d64 <green_2>
			led_buffer_lane2[0] = green2_time/10;
 8000d12:	4b79      	ldr	r3, [pc, #484]	; (8000ef8 <fsm_auto_run_lane2+0x240>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a79      	ldr	r2, [pc, #484]	; (8000efc <fsm_auto_run_lane2+0x244>)
 8000d18:	fb82 1203 	smull	r1, r2, r2, r3
 8000d1c:	1092      	asrs	r2, r2, #2
 8000d1e:	17db      	asrs	r3, r3, #31
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	4a77      	ldr	r2, [pc, #476]	; (8000f00 <fsm_auto_run_lane2+0x248>)
 8000d24:	6013      	str	r3, [r2, #0]
			led_buffer_lane2[1] = green2_time%10;
 8000d26:	4b74      	ldr	r3, [pc, #464]	; (8000ef8 <fsm_auto_run_lane2+0x240>)
 8000d28:	6819      	ldr	r1, [r3, #0]
 8000d2a:	4b74      	ldr	r3, [pc, #464]	; (8000efc <fsm_auto_run_lane2+0x244>)
 8000d2c:	fb83 2301 	smull	r2, r3, r3, r1
 8000d30:	109a      	asrs	r2, r3, #2
 8000d32:	17cb      	asrs	r3, r1, #31
 8000d34:	1ad2      	subs	r2, r2, r3
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	1aca      	subs	r2, r1, r3
 8000d40:	4b6f      	ldr	r3, [pc, #444]	; (8000f00 <fsm_auto_run_lane2+0x248>)
 8000d42:	605a      	str	r2, [r3, #4]
			if(timer_flag[5] == 1){
 8000d44:	4b6f      	ldr	r3, [pc, #444]	; (8000f04 <fsm_auto_run_lane2+0x24c>)
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d111      	bne.n	8000d70 <fsm_auto_run_lane2+0xb8>
				green2_time--;
 8000d4c:	4b6a      	ldr	r3, [pc, #424]	; (8000ef8 <fsm_auto_run_lane2+0x240>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	4a69      	ldr	r2, [pc, #420]	; (8000ef8 <fsm_auto_run_lane2+0x240>)
 8000d54:	6013      	str	r3, [r2, #0]
				if(green2_time == 0){
 8000d56:	4b68      	ldr	r3, [pc, #416]	; (8000ef8 <fsm_auto_run_lane2+0x240>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d103      	bne.n	8000d66 <fsm_auto_run_lane2+0xae>
					green2_time=green2TimeMAX;
 8000d5e:	4b64      	ldr	r3, [pc, #400]	; (8000ef0 <fsm_auto_run_lane2+0x238>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a65      	ldr	r2, [pc, #404]	; (8000ef8 <fsm_auto_run_lane2+0x240>)
 8000d64:	6013      	str	r3, [r2, #0]
				}
				setTimer(5, 1000);
 8000d66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d6a:	2005      	movs	r0, #5
 8000d6c:	f000 feac 	bl	8001ac8 <setTimer>
			}
			if(timer_flag[2] == 1){
 8000d70:	4b64      	ldr	r3, [pc, #400]	; (8000f04 <fsm_auto_run_lane2+0x24c>)
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	f040 80b1 	bne.w	8000edc <fsm_auto_run_lane2+0x224>
				status_lane2 = YELLOW_2;
 8000d7a:	4b5c      	ldr	r3, [pc, #368]	; (8000eec <fsm_auto_run_lane2+0x234>)
 8000d7c:	2211      	movs	r2, #17
 8000d7e:	601a      	str	r2, [r3, #0]
				value2_buffer[1]=yellow2TimeMAX*1000;
 8000d80:	4b61      	ldr	r3, [pc, #388]	; (8000f08 <fsm_auto_run_lane2+0x250>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d88:	fb02 f303 	mul.w	r3, r2, r3
 8000d8c:	4a59      	ldr	r2, [pc, #356]	; (8000ef4 <fsm_auto_run_lane2+0x23c>)
 8000d8e:	6053      	str	r3, [r2, #4]
				setTimer(2, value2_buffer[1]);
 8000d90:	4b58      	ldr	r3, [pc, #352]	; (8000ef4 <fsm_auto_run_lane2+0x23c>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	4619      	mov	r1, r3
 8000d96:	2002      	movs	r0, #2
 8000d98:	f000 fe96 	bl	8001ac8 <setTimer>
				setTimer(5, 1000);
 8000d9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000da0:	2005      	movs	r0, #5
 8000da2:	f000 fe91 	bl	8001ac8 <setTimer>
			}
			break;
 8000da6:	e099      	b.n	8000edc <fsm_auto_run_lane2+0x224>
		case YELLOW_2:
			yellow_2();
 8000da8:	f000 fff2 	bl	8001d90 <yellow_2>
			led_buffer_lane2[0] = yellow2_time/10;
 8000dac:	4b57      	ldr	r3, [pc, #348]	; (8000f0c <fsm_auto_run_lane2+0x254>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a52      	ldr	r2, [pc, #328]	; (8000efc <fsm_auto_run_lane2+0x244>)
 8000db2:	fb82 1203 	smull	r1, r2, r2, r3
 8000db6:	1092      	asrs	r2, r2, #2
 8000db8:	17db      	asrs	r3, r3, #31
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	4a50      	ldr	r2, [pc, #320]	; (8000f00 <fsm_auto_run_lane2+0x248>)
 8000dbe:	6013      	str	r3, [r2, #0]
			led_buffer_lane2[1] = yellow2_time%10;
 8000dc0:	4b52      	ldr	r3, [pc, #328]	; (8000f0c <fsm_auto_run_lane2+0x254>)
 8000dc2:	6819      	ldr	r1, [r3, #0]
 8000dc4:	4b4d      	ldr	r3, [pc, #308]	; (8000efc <fsm_auto_run_lane2+0x244>)
 8000dc6:	fb83 2301 	smull	r2, r3, r3, r1
 8000dca:	109a      	asrs	r2, r3, #2
 8000dcc:	17cb      	asrs	r3, r1, #31
 8000dce:	1ad2      	subs	r2, r2, r3
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	1aca      	subs	r2, r1, r3
 8000dda:	4b49      	ldr	r3, [pc, #292]	; (8000f00 <fsm_auto_run_lane2+0x248>)
 8000ddc:	605a      	str	r2, [r3, #4]
			if(timer_flag[5] == 1){
 8000dde:	4b49      	ldr	r3, [pc, #292]	; (8000f04 <fsm_auto_run_lane2+0x24c>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d111      	bne.n	8000e0a <fsm_auto_run_lane2+0x152>
				yellow2_time--;
 8000de6:	4b49      	ldr	r3, [pc, #292]	; (8000f0c <fsm_auto_run_lane2+0x254>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	4a47      	ldr	r2, [pc, #284]	; (8000f0c <fsm_auto_run_lane2+0x254>)
 8000dee:	6013      	str	r3, [r2, #0]
				if(yellow2_time == 0){
 8000df0:	4b46      	ldr	r3, [pc, #280]	; (8000f0c <fsm_auto_run_lane2+0x254>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d103      	bne.n	8000e00 <fsm_auto_run_lane2+0x148>
					yellow2_time=yellow2TimeMAX;
 8000df8:	4b43      	ldr	r3, [pc, #268]	; (8000f08 <fsm_auto_run_lane2+0x250>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a43      	ldr	r2, [pc, #268]	; (8000f0c <fsm_auto_run_lane2+0x254>)
 8000dfe:	6013      	str	r3, [r2, #0]
				}
				setTimer(5, 1000);
 8000e00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e04:	2005      	movs	r0, #5
 8000e06:	f000 fe5f 	bl	8001ac8 <setTimer>
			}
			if(timer_flag[2] == 1){
 8000e0a:	4b3e      	ldr	r3, [pc, #248]	; (8000f04 <fsm_auto_run_lane2+0x24c>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d166      	bne.n	8000ee0 <fsm_auto_run_lane2+0x228>
				status_lane2 = RED_2;
 8000e12:	4b36      	ldr	r3, [pc, #216]	; (8000eec <fsm_auto_run_lane2+0x234>)
 8000e14:	220f      	movs	r2, #15
 8000e16:	601a      	str	r2, [r3, #0]
				value2_buffer[2] = red2TimeMAX*1000;
 8000e18:	4b3d      	ldr	r3, [pc, #244]	; (8000f10 <fsm_auto_run_lane2+0x258>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e20:	fb02 f303 	mul.w	r3, r2, r3
 8000e24:	4a33      	ldr	r2, [pc, #204]	; (8000ef4 <fsm_auto_run_lane2+0x23c>)
 8000e26:	6093      	str	r3, [r2, #8]
				setTimer(2, value2_buffer[2]);
 8000e28:	4b32      	ldr	r3, [pc, #200]	; (8000ef4 <fsm_auto_run_lane2+0x23c>)
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	2002      	movs	r0, #2
 8000e30:	f000 fe4a 	bl	8001ac8 <setTimer>
				setTimer(5, 1000);
 8000e34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e38:	2005      	movs	r0, #5
 8000e3a:	f000 fe45 	bl	8001ac8 <setTimer>
			}
			break;
 8000e3e:	e04f      	b.n	8000ee0 <fsm_auto_run_lane2+0x228>
		case RED_2:
			red_2();
 8000e40:	f000 ff7a 	bl	8001d38 <red_2>
			led_buffer_lane2[0] = red2_time/10;
 8000e44:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <fsm_auto_run_lane2+0x25c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a2c      	ldr	r2, [pc, #176]	; (8000efc <fsm_auto_run_lane2+0x244>)
 8000e4a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e4e:	1092      	asrs	r2, r2, #2
 8000e50:	17db      	asrs	r3, r3, #31
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	4a2a      	ldr	r2, [pc, #168]	; (8000f00 <fsm_auto_run_lane2+0x248>)
 8000e56:	6013      	str	r3, [r2, #0]
			led_buffer_lane2[1] = red2_time%10;
 8000e58:	4b2e      	ldr	r3, [pc, #184]	; (8000f14 <fsm_auto_run_lane2+0x25c>)
 8000e5a:	6819      	ldr	r1, [r3, #0]
 8000e5c:	4b27      	ldr	r3, [pc, #156]	; (8000efc <fsm_auto_run_lane2+0x244>)
 8000e5e:	fb83 2301 	smull	r2, r3, r3, r1
 8000e62:	109a      	asrs	r2, r3, #2
 8000e64:	17cb      	asrs	r3, r1, #31
 8000e66:	1ad2      	subs	r2, r2, r3
 8000e68:	4613      	mov	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	1aca      	subs	r2, r1, r3
 8000e72:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <fsm_auto_run_lane2+0x248>)
 8000e74:	605a      	str	r2, [r3, #4]
			if(timer_flag[5] == 1){
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <fsm_auto_run_lane2+0x24c>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d111      	bne.n	8000ea2 <fsm_auto_run_lane2+0x1ea>
				red2_time--;
 8000e7e:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <fsm_auto_run_lane2+0x25c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	4a23      	ldr	r2, [pc, #140]	; (8000f14 <fsm_auto_run_lane2+0x25c>)
 8000e86:	6013      	str	r3, [r2, #0]
				if(red2_time == 0){
 8000e88:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <fsm_auto_run_lane2+0x25c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d103      	bne.n	8000e98 <fsm_auto_run_lane2+0x1e0>
					red2_time=red1TimeMAX;
 8000e90:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <fsm_auto_run_lane2+0x260>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a1f      	ldr	r2, [pc, #124]	; (8000f14 <fsm_auto_run_lane2+0x25c>)
 8000e96:	6013      	str	r3, [r2, #0]
				}
				setTimer(5, 1000);
 8000e98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e9c:	2005      	movs	r0, #5
 8000e9e:	f000 fe13 	bl	8001ac8 <setTimer>
			}
			if(timer_flag[2] == 1){
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <fsm_auto_run_lane2+0x24c>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d11c      	bne.n	8000ee4 <fsm_auto_run_lane2+0x22c>
				status_lane2 = GREEN_2;
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <fsm_auto_run_lane2+0x234>)
 8000eac:	2210      	movs	r2, #16
 8000eae:	601a      	str	r2, [r3, #0]
				value2_buffer[0] = green2TimeMAX*1000;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <fsm_auto_run_lane2+0x238>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eb8:	fb02 f303 	mul.w	r3, r2, r3
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <fsm_auto_run_lane2+0x23c>)
 8000ebe:	6013      	str	r3, [r2, #0]
				setTimer(2, value2_buffer[0]);
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <fsm_auto_run_lane2+0x23c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	f000 fdfe 	bl	8001ac8 <setTimer>
				setTimer(5, 1000);
 8000ecc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ed0:	2005      	movs	r0, #5
 8000ed2:	f000 fdf9 	bl	8001ac8 <setTimer>
			}
			break;
 8000ed6:	e005      	b.n	8000ee4 <fsm_auto_run_lane2+0x22c>
		default:
			break;
 8000ed8:	bf00      	nop
 8000eda:	e004      	b.n	8000ee6 <fsm_auto_run_lane2+0x22e>
			break;
 8000edc:	bf00      	nop
 8000ede:	e002      	b.n	8000ee6 <fsm_auto_run_lane2+0x22e>
			break;
 8000ee0:	bf00      	nop
 8000ee2:	e000      	b.n	8000ee6 <fsm_auto_run_lane2+0x22e>
			break;
 8000ee4:	bf00      	nop
	}
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000038 	.word	0x20000038
 8000ef0:	2000005c 	.word	0x2000005c
 8000ef4:	200000e4 	.word	0x200000e4
 8000ef8:	20000074 	.word	0x20000074
 8000efc:	66666667 	.word	0x66666667
 8000f00:	200000d0 	.word	0x200000d0
 8000f04:	2000011c 	.word	0x2000011c
 8000f08:	20000060 	.word	0x20000060
 8000f0c:	20000078 	.word	0x20000078
 8000f10:	20000058 	.word	0x20000058
 8000f14:	20000070 	.word	0x20000070
 8000f18:	2000004c 	.word	0x2000004c

08000f1c <fsm_manual_run>:
#include "fsm_auto.h"
#include "traffic_2_lane.h"
#include "fsm_traffic.h"


void fsm_manual_run(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	switch(STATUS_MODE){
 8000f20:	4b90      	ldr	r3, [pc, #576]	; (8001164 <fsm_manual_run+0x248>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	f200 81c0 	bhi.w	80012aa <fsm_manual_run+0x38e>
 8000f2a:	a201      	add	r2, pc, #4	; (adr r2, 8000f30 <fsm_manual_run+0x14>)
 8000f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f30:	08000f45 	.word	0x08000f45
 8000f34:	08000f4d 	.word	0x08000f4d
 8000f38:	08000f79 	.word	0x08000f79
 8000f3c:	0800105b 	.word	0x0800105b
 8000f40:	080011b1 	.word	0x080011b1
		case INIT:
			STATUS_MODE = MODE_1;
 8000f44:	4b87      	ldr	r3, [pc, #540]	; (8001164 <fsm_manual_run+0x248>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	601a      	str	r2, [r3, #0]
			break;
 8000f4a:	e1ae      	b.n	80012aa <fsm_manual_run+0x38e>

		case MODE_1:
			status_traffic_lane1 = display_traffic_lane1;
 8000f4c:	4b86      	ldr	r3, [pc, #536]	; (8001168 <fsm_manual_run+0x24c>)
 8000f4e:	221e      	movs	r2, #30
 8000f50:	601a      	str	r2, [r3, #0]
			status_traffic_lane2 = display_traffic_lane2;
 8000f52:	4b86      	ldr	r3, [pc, #536]	; (800116c <fsm_manual_run+0x250>)
 8000f54:	2223      	movs	r2, #35	; 0x23
 8000f56:	601a      	str	r2, [r3, #0]
			StatusLED1 = CountDownLED1;
 8000f58:	4b85      	ldr	r3, [pc, #532]	; (8001170 <fsm_manual_run+0x254>)
 8000f5a:	2214      	movs	r2, #20
 8000f5c:	601a      	str	r2, [r3, #0]
			StatusLED2 = CountDownLED2;
 8000f5e:	4b85      	ldr	r3, [pc, #532]	; (8001174 <fsm_manual_run+0x258>)
 8000f60:	2218      	movs	r2, #24
 8000f62:	601a      	str	r2, [r3, #0]

			if(isButton1_Pressed() == 1){
 8000f64:	f7ff f8f2 	bl	800014c <isButton1_Pressed>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	f040 8196 	bne.w	800129c <fsm_manual_run+0x380>
				STATUS_MODE = MODE_2;
 8000f70:	4b7c      	ldr	r3, [pc, #496]	; (8001164 <fsm_manual_run+0x248>)
 8000f72:	2202      	movs	r2, #2
 8000f74:	601a      	str	r2, [r3, #0]
			}
			break;
 8000f76:	e191      	b.n	800129c <fsm_manual_run+0x380>
		case MODE_2:
			status_traffic_lane1 = modify_red1;
 8000f78:	4b7b      	ldr	r3, [pc, #492]	; (8001168 <fsm_manual_run+0x24c>)
 8000f7a:	221f      	movs	r2, #31
 8000f7c:	601a      	str	r2, [r3, #0]
			status_traffic_lane2 = modify_red2;
 8000f7e:	4b7b      	ldr	r3, [pc, #492]	; (800116c <fsm_manual_run+0x250>)
 8000f80:	222d      	movs	r2, #45	; 0x2d
 8000f82:	601a      	str	r2, [r3, #0]
			StatusLED1 = DisplayLED1Mode2;
 8000f84:	4b7a      	ldr	r3, [pc, #488]	; (8001170 <fsm_manual_run+0x254>)
 8000f86:	2215      	movs	r2, #21
 8000f88:	601a      	str	r2, [r3, #0]
			StatusLED2 = TimerValue;
 8000f8a:	4b7a      	ldr	r3, [pc, #488]	; (8001174 <fsm_manual_run+0x258>)
 8000f8c:	2219      	movs	r2, #25
 8000f8e:	601a      	str	r2, [r3, #0]

			if(isButton2_Pressed() == 1){
 8000f90:	f7ff f8ee 	bl	8000170 <isButton2_Pressed>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d113      	bne.n	8000fc2 <fsm_manual_run+0xa6>
				red1TimeMAX++;
 8000f9a:	4b77      	ldr	r3, [pc, #476]	; (8001178 <fsm_manual_run+0x25c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	4a75      	ldr	r2, [pc, #468]	; (8001178 <fsm_manual_run+0x25c>)
 8000fa2:	6013      	str	r3, [r2, #0]
				red2TimeMAX++;
 8000fa4:	4b75      	ldr	r3, [pc, #468]	; (800117c <fsm_manual_run+0x260>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	4a74      	ldr	r2, [pc, #464]	; (800117c <fsm_manual_run+0x260>)
 8000fac:	6013      	str	r3, [r2, #0]
				green1TimeMAX++;
 8000fae:	4b74      	ldr	r3, [pc, #464]	; (8001180 <fsm_manual_run+0x264>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	4a72      	ldr	r2, [pc, #456]	; (8001180 <fsm_manual_run+0x264>)
 8000fb6:	6013      	str	r3, [r2, #0]
				green2TimeMAX++;
 8000fb8:	4b72      	ldr	r3, [pc, #456]	; (8001184 <fsm_manual_run+0x268>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	4a71      	ldr	r2, [pc, #452]	; (8001184 <fsm_manual_run+0x268>)
 8000fc0:	6013      	str	r3, [r2, #0]
//					green1TimeMAX = 3;
//					green2TimeMAX = 3;
//				}
			}
			//update buffer
			led_buffer_lane2[0] = red2TimeMAX/10;
 8000fc2:	4b6e      	ldr	r3, [pc, #440]	; (800117c <fsm_manual_run+0x260>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a70      	ldr	r2, [pc, #448]	; (8001188 <fsm_manual_run+0x26c>)
 8000fc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fcc:	1092      	asrs	r2, r2, #2
 8000fce:	17db      	asrs	r3, r3, #31
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	4a6e      	ldr	r2, [pc, #440]	; (800118c <fsm_manual_run+0x270>)
 8000fd4:	6013      	str	r3, [r2, #0]
			led_buffer_lane2[1] = red2TimeMAX%10;
 8000fd6:	4b69      	ldr	r3, [pc, #420]	; (800117c <fsm_manual_run+0x260>)
 8000fd8:	6819      	ldr	r1, [r3, #0]
 8000fda:	4b6b      	ldr	r3, [pc, #428]	; (8001188 <fsm_manual_run+0x26c>)
 8000fdc:	fb83 2301 	smull	r2, r3, r3, r1
 8000fe0:	109a      	asrs	r2, r3, #2
 8000fe2:	17cb      	asrs	r3, r1, #31
 8000fe4:	1ad2      	subs	r2, r2, r3
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	1aca      	subs	r2, r1, r3
 8000ff0:	4b66      	ldr	r3, [pc, #408]	; (800118c <fsm_manual_run+0x270>)
 8000ff2:	605a      	str	r2, [r3, #4]

			if(isButton3_Pressed() == 1){
 8000ff4:	f7ff f8ce 	bl	8000194 <isButton3_Pressed>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d123      	bne.n	8001046 <fsm_manual_run+0x12a>
				red1_time = red1TimeMAX;
 8000ffe:	4b5e      	ldr	r3, [pc, #376]	; (8001178 <fsm_manual_run+0x25c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a63      	ldr	r2, [pc, #396]	; (8001190 <fsm_manual_run+0x274>)
 8001004:	6013      	str	r3, [r2, #0]
				red2_time = red2TimeMAX;
 8001006:	4b5d      	ldr	r3, [pc, #372]	; (800117c <fsm_manual_run+0x260>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a62      	ldr	r2, [pc, #392]	; (8001194 <fsm_manual_run+0x278>)
 800100c:	6013      	str	r3, [r2, #0]
				green1_time = green1TimeMAX;
 800100e:	4b5c      	ldr	r3, [pc, #368]	; (8001180 <fsm_manual_run+0x264>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a61      	ldr	r2, [pc, #388]	; (8001198 <fsm_manual_run+0x27c>)
 8001014:	6013      	str	r3, [r2, #0]
				green2_time = green2TimeMAX;
 8001016:	4b5b      	ldr	r3, [pc, #364]	; (8001184 <fsm_manual_run+0x268>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a60      	ldr	r2, [pc, #384]	; (800119c <fsm_manual_run+0x280>)
 800101c:	6013      	str	r3, [r2, #0]
				if(red1_time > 99 && red2_time > 99){
 800101e:	4b5c      	ldr	r3, [pc, #368]	; (8001190 <fsm_manual_run+0x274>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b63      	cmp	r3, #99	; 0x63
 8001024:	dd0f      	ble.n	8001046 <fsm_manual_run+0x12a>
 8001026:	4b5b      	ldr	r3, [pc, #364]	; (8001194 <fsm_manual_run+0x278>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b63      	cmp	r3, #99	; 0x63
 800102c:	dd0b      	ble.n	8001046 <fsm_manual_run+0x12a>
					red1_time = 5;
 800102e:	4b58      	ldr	r3, [pc, #352]	; (8001190 <fsm_manual_run+0x274>)
 8001030:	2205      	movs	r2, #5
 8001032:	601a      	str	r2, [r3, #0]
					red2_time = 5;
 8001034:	4b57      	ldr	r3, [pc, #348]	; (8001194 <fsm_manual_run+0x278>)
 8001036:	2205      	movs	r2, #5
 8001038:	601a      	str	r2, [r3, #0]
					green1_time = 3;
 800103a:	4b57      	ldr	r3, [pc, #348]	; (8001198 <fsm_manual_run+0x27c>)
 800103c:	2203      	movs	r2, #3
 800103e:	601a      	str	r2, [r3, #0]
					green2_time = 3;
 8001040:	4b56      	ldr	r3, [pc, #344]	; (800119c <fsm_manual_run+0x280>)
 8001042:	2203      	movs	r2, #3
 8001044:	601a      	str	r2, [r3, #0]
				}
			}
			if(isButton1_Pressed() == 1){
 8001046:	f7ff f881 	bl	800014c <isButton1_Pressed>
 800104a:	4603      	mov	r3, r0
 800104c:	2b01      	cmp	r3, #1
 800104e:	f040 8127 	bne.w	80012a0 <fsm_manual_run+0x384>
				STATUS_MODE = MODE_3;
 8001052:	4b44      	ldr	r3, [pc, #272]	; (8001164 <fsm_manual_run+0x248>)
 8001054:	2203      	movs	r2, #3
 8001056:	601a      	str	r2, [r3, #0]
			}
			break;
 8001058:	e122      	b.n	80012a0 <fsm_manual_run+0x384>
		case MODE_3:
			status_traffic_lane1 = modify_yellow1;
 800105a:	4b43      	ldr	r3, [pc, #268]	; (8001168 <fsm_manual_run+0x24c>)
 800105c:	2221      	movs	r2, #33	; 0x21
 800105e:	601a      	str	r2, [r3, #0]
			status_traffic_lane2 = modify_yellow2;
 8001060:	4b42      	ldr	r3, [pc, #264]	; (800116c <fsm_manual_run+0x250>)
 8001062:	222f      	movs	r2, #47	; 0x2f
 8001064:	601a      	str	r2, [r3, #0]
			StatusLED1 = DisplayLED1Mode3;
 8001066:	4b42      	ldr	r3, [pc, #264]	; (8001170 <fsm_manual_run+0x254>)
 8001068:	2216      	movs	r2, #22
 800106a:	601a      	str	r2, [r3, #0]
			StatusLED2 = TimerValue;
 800106c:	4b41      	ldr	r3, [pc, #260]	; (8001174 <fsm_manual_run+0x258>)
 800106e:	2219      	movs	r2, #25
 8001070:	601a      	str	r2, [r3, #0]

			if(isButton2_Pressed() == 1){
 8001072:	f7ff f87d 	bl	8000170 <isButton2_Pressed>
 8001076:	4603      	mov	r3, r0
 8001078:	2b01      	cmp	r3, #1
 800107a:	d127      	bne.n	80010cc <fsm_manual_run+0x1b0>
				yellow1TimeMAX++;
 800107c:	4b48      	ldr	r3, [pc, #288]	; (80011a0 <fsm_manual_run+0x284>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	3301      	adds	r3, #1
 8001082:	4a47      	ldr	r2, [pc, #284]	; (80011a0 <fsm_manual_run+0x284>)
 8001084:	6013      	str	r3, [r2, #0]
				yellow2TimeMAX++;
 8001086:	4b47      	ldr	r3, [pc, #284]	; (80011a4 <fsm_manual_run+0x288>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	4a45      	ldr	r2, [pc, #276]	; (80011a4 <fsm_manual_run+0x288>)
 800108e:	6013      	str	r3, [r2, #0]
				red1TimeMAX++;
 8001090:	4b39      	ldr	r3, [pc, #228]	; (8001178 <fsm_manual_run+0x25c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	4a38      	ldr	r2, [pc, #224]	; (8001178 <fsm_manual_run+0x25c>)
 8001098:	6013      	str	r3, [r2, #0]
				red2TimeMAX++;
 800109a:	4b38      	ldr	r3, [pc, #224]	; (800117c <fsm_manual_run+0x260>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	3301      	adds	r3, #1
 80010a0:	4a36      	ldr	r2, [pc, #216]	; (800117c <fsm_manual_run+0x260>)
 80010a2:	6013      	str	r3, [r2, #0]
				if(yellow1TimeMAX > 99 && red1TimeMAX > 99){
 80010a4:	4b3e      	ldr	r3, [pc, #248]	; (80011a0 <fsm_manual_run+0x284>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b63      	cmp	r3, #99	; 0x63
 80010aa:	dd0f      	ble.n	80010cc <fsm_manual_run+0x1b0>
 80010ac:	4b32      	ldr	r3, [pc, #200]	; (8001178 <fsm_manual_run+0x25c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b63      	cmp	r3, #99	; 0x63
 80010b2:	dd0b      	ble.n	80010cc <fsm_manual_run+0x1b0>
					yellow1TimeMAX = 2;
 80010b4:	4b3a      	ldr	r3, [pc, #232]	; (80011a0 <fsm_manual_run+0x284>)
 80010b6:	2202      	movs	r2, #2
 80010b8:	601a      	str	r2, [r3, #0]
					yellow2TimeMAX = 2;
 80010ba:	4b3a      	ldr	r3, [pc, #232]	; (80011a4 <fsm_manual_run+0x288>)
 80010bc:	2202      	movs	r2, #2
 80010be:	601a      	str	r2, [r3, #0]
					red1TimeMAX = 5;
 80010c0:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <fsm_manual_run+0x25c>)
 80010c2:	2205      	movs	r2, #5
 80010c4:	601a      	str	r2, [r3, #0]
					red2TimeMAX = 5;
 80010c6:	4b2d      	ldr	r3, [pc, #180]	; (800117c <fsm_manual_run+0x260>)
 80010c8:	2205      	movs	r2, #5
 80010ca:	601a      	str	r2, [r3, #0]
				}
			}
			led_buffer_lane2[0] = yellow2TimeMAX/10;
 80010cc:	4b35      	ldr	r3, [pc, #212]	; (80011a4 <fsm_manual_run+0x288>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a2d      	ldr	r2, [pc, #180]	; (8001188 <fsm_manual_run+0x26c>)
 80010d2:	fb82 1203 	smull	r1, r2, r2, r3
 80010d6:	1092      	asrs	r2, r2, #2
 80010d8:	17db      	asrs	r3, r3, #31
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	4a2b      	ldr	r2, [pc, #172]	; (800118c <fsm_manual_run+0x270>)
 80010de:	6013      	str	r3, [r2, #0]
			led_buffer_lane2[1] = yellow2TimeMAX%10;
 80010e0:	4b30      	ldr	r3, [pc, #192]	; (80011a4 <fsm_manual_run+0x288>)
 80010e2:	6819      	ldr	r1, [r3, #0]
 80010e4:	4b28      	ldr	r3, [pc, #160]	; (8001188 <fsm_manual_run+0x26c>)
 80010e6:	fb83 2301 	smull	r2, r3, r3, r1
 80010ea:	109a      	asrs	r2, r3, #2
 80010ec:	17cb      	asrs	r3, r1, #31
 80010ee:	1ad2      	subs	r2, r2, r3
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	1aca      	subs	r2, r1, r3
 80010fa:	4b24      	ldr	r3, [pc, #144]	; (800118c <fsm_manual_run+0x270>)
 80010fc:	605a      	str	r2, [r3, #4]

			if(isButton3_Pressed() == 1){
 80010fe:	f7ff f849 	bl	8000194 <isButton3_Pressed>
 8001102:	4603      	mov	r3, r0
 8001104:	2b01      	cmp	r3, #1
 8001106:	d123      	bne.n	8001150 <fsm_manual_run+0x234>
				yellow1_time = yellow1TimeMAX;
 8001108:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <fsm_manual_run+0x284>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a26      	ldr	r2, [pc, #152]	; (80011a8 <fsm_manual_run+0x28c>)
 800110e:	6013      	str	r3, [r2, #0]
				yellow2_time = yellow2TimeMAX;
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <fsm_manual_run+0x288>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a25      	ldr	r2, [pc, #148]	; (80011ac <fsm_manual_run+0x290>)
 8001116:	6013      	str	r3, [r2, #0]
				red1_time = red1TimeMAX;
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <fsm_manual_run+0x25c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <fsm_manual_run+0x274>)
 800111e:	6013      	str	r3, [r2, #0]
				red2_time = red2TimeMAX;
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <fsm_manual_run+0x260>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a1b      	ldr	r2, [pc, #108]	; (8001194 <fsm_manual_run+0x278>)
 8001126:	6013      	str	r3, [r2, #0]
				if(yellow1_time > 99 && yellow2_time > 99){
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <fsm_manual_run+0x28c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b63      	cmp	r3, #99	; 0x63
 800112e:	dd0f      	ble.n	8001150 <fsm_manual_run+0x234>
 8001130:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <fsm_manual_run+0x290>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b63      	cmp	r3, #99	; 0x63
 8001136:	dd0b      	ble.n	8001150 <fsm_manual_run+0x234>
					yellow1_time = 2;
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <fsm_manual_run+0x28c>)
 800113a:	2202      	movs	r2, #2
 800113c:	601a      	str	r2, [r3, #0]
					yellow1_time = 2;
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <fsm_manual_run+0x28c>)
 8001140:	2202      	movs	r2, #2
 8001142:	601a      	str	r2, [r3, #0]
					red1_time = 5;
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <fsm_manual_run+0x274>)
 8001146:	2205      	movs	r2, #5
 8001148:	601a      	str	r2, [r3, #0]
					red2_time = 5;
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <fsm_manual_run+0x278>)
 800114c:	2205      	movs	r2, #5
 800114e:	601a      	str	r2, [r3, #0]
				}
			}
			if(isButton1_Pressed() == 1){
 8001150:	f7fe fffc 	bl	800014c <isButton1_Pressed>
 8001154:	4603      	mov	r3, r0
 8001156:	2b01      	cmp	r3, #1
 8001158:	f040 80a4 	bne.w	80012a4 <fsm_manual_run+0x388>
				STATUS_MODE = MODE_4;
 800115c:	4b01      	ldr	r3, [pc, #4]	; (8001164 <fsm_manual_run+0x248>)
 800115e:	2204      	movs	r2, #4
 8001160:	601a      	str	r2, [r3, #0]
			}
			break;
 8001162:	e09f      	b.n	80012a4 <fsm_manual_run+0x388>
 8001164:	200000f0 	.word	0x200000f0
 8001168:	20000044 	.word	0x20000044
 800116c:	20000048 	.word	0x20000048
 8001170:	2000003c 	.word	0x2000003c
 8001174:	20000040 	.word	0x20000040
 8001178:	2000004c 	.word	0x2000004c
 800117c:	20000058 	.word	0x20000058
 8001180:	20000050 	.word	0x20000050
 8001184:	2000005c 	.word	0x2000005c
 8001188:	66666667 	.word	0x66666667
 800118c:	200000d0 	.word	0x200000d0
 8001190:	20000064 	.word	0x20000064
 8001194:	20000070 	.word	0x20000070
 8001198:	20000068 	.word	0x20000068
 800119c:	20000074 	.word	0x20000074
 80011a0:	20000054 	.word	0x20000054
 80011a4:	20000060 	.word	0x20000060
 80011a8:	2000006c 	.word	0x2000006c
 80011ac:	20000078 	.word	0x20000078
		case MODE_4:
			status_traffic_lane1 = modify_green1;
 80011b0:	4b3f      	ldr	r3, [pc, #252]	; (80012b0 <fsm_manual_run+0x394>)
 80011b2:	2220      	movs	r2, #32
 80011b4:	601a      	str	r2, [r3, #0]
			status_traffic_lane2 = modify_green2;
 80011b6:	4b3f      	ldr	r3, [pc, #252]	; (80012b4 <fsm_manual_run+0x398>)
 80011b8:	222e      	movs	r2, #46	; 0x2e
 80011ba:	601a      	str	r2, [r3, #0]
			StatusLED1 = DisplayLED1Mode4;
 80011bc:	4b3e      	ldr	r3, [pc, #248]	; (80012b8 <fsm_manual_run+0x39c>)
 80011be:	2217      	movs	r2, #23
 80011c0:	601a      	str	r2, [r3, #0]
			StatusLED2 = TimerValue;
 80011c2:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <fsm_manual_run+0x3a0>)
 80011c4:	2219      	movs	r2, #25
 80011c6:	601a      	str	r2, [r3, #0]

			if(isButton2_Pressed() == 1){
 80011c8:	f7fe ffd2 	bl	8000170 <isButton2_Pressed>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d113      	bne.n	80011fa <fsm_manual_run+0x2de>
				green1TimeMAX++;
 80011d2:	4b3b      	ldr	r3, [pc, #236]	; (80012c0 <fsm_manual_run+0x3a4>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	4a39      	ldr	r2, [pc, #228]	; (80012c0 <fsm_manual_run+0x3a4>)
 80011da:	6013      	str	r3, [r2, #0]
				green2TimeMAX++;
 80011dc:	4b39      	ldr	r3, [pc, #228]	; (80012c4 <fsm_manual_run+0x3a8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	4a38      	ldr	r2, [pc, #224]	; (80012c4 <fsm_manual_run+0x3a8>)
 80011e4:	6013      	str	r3, [r2, #0]
				red1TimeMAX++;
 80011e6:	4b38      	ldr	r3, [pc, #224]	; (80012c8 <fsm_manual_run+0x3ac>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	3301      	adds	r3, #1
 80011ec:	4a36      	ldr	r2, [pc, #216]	; (80012c8 <fsm_manual_run+0x3ac>)
 80011ee:	6013      	str	r3, [r2, #0]
				red2TimeMAX++;
 80011f0:	4b36      	ldr	r3, [pc, #216]	; (80012cc <fsm_manual_run+0x3b0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	4a35      	ldr	r2, [pc, #212]	; (80012cc <fsm_manual_run+0x3b0>)
 80011f8:	6013      	str	r3, [r2, #0]
			}

			led_buffer_lane2[0] = green2TimeMAX/10;
 80011fa:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <fsm_manual_run+0x3a8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a34      	ldr	r2, [pc, #208]	; (80012d0 <fsm_manual_run+0x3b4>)
 8001200:	fb82 1203 	smull	r1, r2, r2, r3
 8001204:	1092      	asrs	r2, r2, #2
 8001206:	17db      	asrs	r3, r3, #31
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	4a32      	ldr	r2, [pc, #200]	; (80012d4 <fsm_manual_run+0x3b8>)
 800120c:	6013      	str	r3, [r2, #0]
			led_buffer_lane2[1] = green2TimeMAX%10;
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <fsm_manual_run+0x3a8>)
 8001210:	6819      	ldr	r1, [r3, #0]
 8001212:	4b2f      	ldr	r3, [pc, #188]	; (80012d0 <fsm_manual_run+0x3b4>)
 8001214:	fb83 2301 	smull	r2, r3, r3, r1
 8001218:	109a      	asrs	r2, r3, #2
 800121a:	17cb      	asrs	r3, r1, #31
 800121c:	1ad2      	subs	r2, r2, r3
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	1aca      	subs	r2, r1, r3
 8001228:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <fsm_manual_run+0x3b8>)
 800122a:	605a      	str	r2, [r3, #4]

			if(isButton3_Pressed() == 1){
 800122c:	f7fe ffb2 	bl	8000194 <isButton3_Pressed>
 8001230:	4603      	mov	r3, r0
 8001232:	2b01      	cmp	r3, #1
 8001234:	d123      	bne.n	800127e <fsm_manual_run+0x362>
				green1_time = green1TimeMAX;
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <fsm_manual_run+0x3a4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a27      	ldr	r2, [pc, #156]	; (80012d8 <fsm_manual_run+0x3bc>)
 800123c:	6013      	str	r3, [r2, #0]
				green2_time = green2TimeMAX;
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <fsm_manual_run+0x3a8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a26      	ldr	r2, [pc, #152]	; (80012dc <fsm_manual_run+0x3c0>)
 8001244:	6013      	str	r3, [r2, #0]
				red1_time = red1TimeMAX;
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <fsm_manual_run+0x3ac>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a25      	ldr	r2, [pc, #148]	; (80012e0 <fsm_manual_run+0x3c4>)
 800124c:	6013      	str	r3, [r2, #0]
				red2_time = red2TimeMAX;
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <fsm_manual_run+0x3b0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a24      	ldr	r2, [pc, #144]	; (80012e4 <fsm_manual_run+0x3c8>)
 8001254:	6013      	str	r3, [r2, #0]
				if(green1_time > 99 && green2_time > 99){
 8001256:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <fsm_manual_run+0x3bc>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b63      	cmp	r3, #99	; 0x63
 800125c:	dd0f      	ble.n	800127e <fsm_manual_run+0x362>
 800125e:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <fsm_manual_run+0x3c0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b63      	cmp	r3, #99	; 0x63
 8001264:	dd0b      	ble.n	800127e <fsm_manual_run+0x362>
					green1_time = 3;
 8001266:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <fsm_manual_run+0x3bc>)
 8001268:	2203      	movs	r2, #3
 800126a:	601a      	str	r2, [r3, #0]
					green2_time = 3;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <fsm_manual_run+0x3c0>)
 800126e:	2203      	movs	r2, #3
 8001270:	601a      	str	r2, [r3, #0]
					red1_time = 5;
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <fsm_manual_run+0x3c4>)
 8001274:	2205      	movs	r2, #5
 8001276:	601a      	str	r2, [r3, #0]
					red2_time = 5;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <fsm_manual_run+0x3c8>)
 800127a:	2205      	movs	r2, #5
 800127c:	601a      	str	r2, [r3, #0]
				}
			}
			if(isButton1_Pressed() == 1 ){
 800127e:	f7fe ff65 	bl	800014c <isButton1_Pressed>
 8001282:	4603      	mov	r3, r0
 8001284:	2b01      	cmp	r3, #1
 8001286:	d10f      	bne.n	80012a8 <fsm_manual_run+0x38c>
				status_lane1 = INIT_1;
 8001288:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <fsm_manual_run+0x3cc>)
 800128a:	220a      	movs	r2, #10
 800128c:	601a      	str	r2, [r3, #0]
				status_lane2 = INIT_2;
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <fsm_manual_run+0x3d0>)
 8001290:	220e      	movs	r2, #14
 8001292:	601a      	str	r2, [r3, #0]
				STATUS_MODE = INIT;
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <fsm_manual_run+0x3d4>)
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
			}
			break;
 800129a:	e005      	b.n	80012a8 <fsm_manual_run+0x38c>
			break;
 800129c:	bf00      	nop
 800129e:	e004      	b.n	80012aa <fsm_manual_run+0x38e>
			break;
 80012a0:	bf00      	nop
 80012a2:	e002      	b.n	80012aa <fsm_manual_run+0x38e>
			break;
 80012a4:	bf00      	nop
 80012a6:	e000      	b.n	80012aa <fsm_manual_run+0x38e>
			break;
 80012a8:	bf00      	nop
		}
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000044 	.word	0x20000044
 80012b4:	20000048 	.word	0x20000048
 80012b8:	2000003c 	.word	0x2000003c
 80012bc:	20000040 	.word	0x20000040
 80012c0:	20000050 	.word	0x20000050
 80012c4:	2000005c 	.word	0x2000005c
 80012c8:	2000004c 	.word	0x2000004c
 80012cc:	20000058 	.word	0x20000058
 80012d0:	66666667 	.word	0x66666667
 80012d4:	200000d0 	.word	0x200000d0
 80012d8:	20000068 	.word	0x20000068
 80012dc:	20000074 	.word	0x20000074
 80012e0:	20000064 	.word	0x20000064
 80012e4:	20000070 	.word	0x20000070
 80012e8:	20000034 	.word	0x20000034
 80012ec:	20000038 	.word	0x20000038
 80012f0:	200000f0 	.word	0x200000f0

080012f4 <FSMDisplayLED1>:
#include "fsm_setting.h"
#include "fsm_auto.h"
int StatusLED1 = CountDownLED1;
int StatusLED2 = CountDownLED2;

void FSMDisplayLED1() {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
    switch (StatusLED1) {
 80012f8:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <FSMDisplayLED1+0xf0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3b14      	subs	r3, #20
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d864      	bhi.n	80013cc <FSMDisplayLED1+0xd8>
 8001302:	a201      	add	r2, pc, #4	; (adr r2, 8001308 <FSMDisplayLED1+0x14>)
 8001304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001308:	08001319 	.word	0x08001319
 800130c:	0800133d 	.word	0x0800133d
 8001310:	0800136d 	.word	0x0800136d
 8001314:	0800139d 	.word	0x0800139d
        case CountDownLED1:
            update7SEG(indexLEDmot);
 8001318:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <FSMDisplayLED1+0xf4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fb2b 	bl	8000978 <update7SEG>
            indexLEDmot++;
 8001322:	4b31      	ldr	r3, [pc, #196]	; (80013e8 <FSMDisplayLED1+0xf4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	3301      	adds	r3, #1
 8001328:	4a2f      	ldr	r2, [pc, #188]	; (80013e8 <FSMDisplayLED1+0xf4>)
 800132a:	6013      	str	r3, [r2, #0]
            if (indexLEDmot == 2) indexLEDmot = 0;
 800132c:	4b2e      	ldr	r3, [pc, #184]	; (80013e8 <FSMDisplayLED1+0xf4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d14d      	bne.n	80013d0 <FSMDisplayLED1+0xdc>
 8001334:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <FSMDisplayLED1+0xf4>)
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
            break;
 800133a:	e049      	b.n	80013d0 <FSMDisplayLED1+0xdc>

        case DisplayLED1Mode2:
            led_buffer_lane1[0] = 0;
 800133c:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <FSMDisplayLED1+0xf8>)
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
            led_buffer_lane1[1] = 2;
 8001342:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <FSMDisplayLED1+0xf8>)
 8001344:	2202      	movs	r2, #2
 8001346:	605a      	str	r2, [r3, #4]
            update7SEG(indexLEDmot);
 8001348:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <FSMDisplayLED1+0xf4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fb13 	bl	8000978 <update7SEG>
            indexLEDmot++;
 8001352:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <FSMDisplayLED1+0xf4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	4a23      	ldr	r2, [pc, #140]	; (80013e8 <FSMDisplayLED1+0xf4>)
 800135a:	6013      	str	r3, [r2, #0]
            if (indexLEDmot == 2) indexLEDmot = 0;
 800135c:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <FSMDisplayLED1+0xf4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d137      	bne.n	80013d4 <FSMDisplayLED1+0xe0>
 8001364:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <FSMDisplayLED1+0xf4>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
            break;
 800136a:	e033      	b.n	80013d4 <FSMDisplayLED1+0xe0>

        case DisplayLED1Mode3:
            led_buffer_lane1[0] = 0;
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <FSMDisplayLED1+0xf8>)
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
            led_buffer_lane1[1] = 3;
 8001372:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <FSMDisplayLED1+0xf8>)
 8001374:	2203      	movs	r2, #3
 8001376:	605a      	str	r2, [r3, #4]
            update7SEG(indexLEDmot);
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <FSMDisplayLED1+0xf4>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fafb 	bl	8000978 <update7SEG>
            indexLEDmot++;
 8001382:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <FSMDisplayLED1+0xf4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <FSMDisplayLED1+0xf4>)
 800138a:	6013      	str	r3, [r2, #0]
            if (indexLEDmot == 2) indexLEDmot = 0;
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <FSMDisplayLED1+0xf4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d121      	bne.n	80013d8 <FSMDisplayLED1+0xe4>
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <FSMDisplayLED1+0xf4>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
            break;
 800139a:	e01d      	b.n	80013d8 <FSMDisplayLED1+0xe4>

        case DisplayLED1Mode4:
            led_buffer_lane1[0] = 0;
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <FSMDisplayLED1+0xf8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
            led_buffer_lane1[1] = 4;
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <FSMDisplayLED1+0xf8>)
 80013a4:	2204      	movs	r2, #4
 80013a6:	605a      	str	r2, [r3, #4]
            update7SEG(indexLEDmot);
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <FSMDisplayLED1+0xf4>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fae3 	bl	8000978 <update7SEG>
            indexLEDmot++;
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <FSMDisplayLED1+0xf4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <FSMDisplayLED1+0xf4>)
 80013ba:	6013      	str	r3, [r2, #0]
            if (indexLEDmot == 2) indexLEDmot = 0;
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <FSMDisplayLED1+0xf4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d10b      	bne.n	80013dc <FSMDisplayLED1+0xe8>
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <FSMDisplayLED1+0xf4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
            break;
 80013ca:	e007      	b.n	80013dc <FSMDisplayLED1+0xe8>

        default:
            break;
 80013cc:	bf00      	nop
 80013ce:	e006      	b.n	80013de <FSMDisplayLED1+0xea>
            break;
 80013d0:	bf00      	nop
 80013d2:	e004      	b.n	80013de <FSMDisplayLED1+0xea>
            break;
 80013d4:	bf00      	nop
 80013d6:	e002      	b.n	80013de <FSMDisplayLED1+0xea>
            break;
 80013d8:	bf00      	nop
 80013da:	e000      	b.n	80013de <FSMDisplayLED1+0xea>
            break;
 80013dc:	bf00      	nop
    }
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000003c 	.word	0x2000003c
 80013e8:	200000c0 	.word	0x200000c0
 80013ec:	200000c8 	.word	0x200000c8

080013f0 <FSMDisplayLED2>:

void FSMDisplayLED2() {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
    switch (StatusLED2) {
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <FSMDisplayLED2+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b18      	cmp	r3, #24
 80013fa:	d002      	beq.n	8001402 <FSMDisplayLED2+0x12>
 80013fc:	2b19      	cmp	r3, #25
 80013fe:	d012      	beq.n	8001426 <FSMDisplayLED2+0x36>
            indexLEDhai++;
            if (indexLEDhai == 2) indexLEDhai = 0;
            break;

        default:
            break;
 8001400:	e026      	b.n	8001450 <FSMDisplayLED2+0x60>
            update7SEG_lane2(indexLEDhai);
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <FSMDisplayLED2+0x68>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff faee 	bl	80009e8 <update7SEG_lane2>
            indexLEDhai++;
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <FSMDisplayLED2+0x68>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	4a11      	ldr	r2, [pc, #68]	; (8001458 <FSMDisplayLED2+0x68>)
 8001414:	6013      	str	r3, [r2, #0]
            if (indexLEDhai == 2) indexLEDhai = 0;
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <FSMDisplayLED2+0x68>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d115      	bne.n	800144a <FSMDisplayLED2+0x5a>
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <FSMDisplayLED2+0x68>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
            break;
 8001424:	e011      	b.n	800144a <FSMDisplayLED2+0x5a>
            update7SEG_lane2(indexLEDhai);
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <FSMDisplayLED2+0x68>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fadc 	bl	80009e8 <update7SEG_lane2>
            indexLEDhai++;
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <FSMDisplayLED2+0x68>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3301      	adds	r3, #1
 8001436:	4a08      	ldr	r2, [pc, #32]	; (8001458 <FSMDisplayLED2+0x68>)
 8001438:	6013      	str	r3, [r2, #0]
            if (indexLEDhai == 2) indexLEDhai = 0;
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <FSMDisplayLED2+0x68>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d105      	bne.n	800144e <FSMDisplayLED2+0x5e>
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <FSMDisplayLED2+0x68>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
            break;
 8001448:	e001      	b.n	800144e <FSMDisplayLED2+0x5e>
            break;
 800144a:	bf00      	nop
 800144c:	e000      	b.n	8001450 <FSMDisplayLED2+0x60>
            break;
 800144e:	bf00      	nop
    }
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000040 	.word	0x20000040
 8001458:	200000c4 	.word	0x200000c4

0800145c <FSM_Display_2LED>:
//		default:
//			break;
//	}
//}

void FSM_Display_2LED(){
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	FSMDisplayLED1();
 8001460:	f7ff ff48 	bl	80012f4 <FSMDisplayLED1>
	FSMDisplayLED2();
 8001464:	f7ff ffc4 	bl	80013f0 <FSMDisplayLED2>
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <fsm_traffic_lane1_run>:
#include "led.h"

int status_traffic_lane1 = display_traffic_lane1;
int status_traffic_lane2 = display_traffic_lane2;

void fsm_traffic_lane1_run(){
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	switch (status_traffic_lane1) {
 8001470:	4b16      	ldr	r3, [pc, #88]	; (80014cc <fsm_traffic_lane1_run+0x60>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	3b1e      	subs	r3, #30
 8001476:	2b03      	cmp	r3, #3
 8001478:	d825      	bhi.n	80014c6 <fsm_traffic_lane1_run+0x5a>
 800147a:	a201      	add	r2, pc, #4	; (adr r2, 8001480 <fsm_traffic_lane1_run+0x14>)
 800147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001480:	08001491 	.word	0x08001491
 8001484:	08001497 	.word	0x08001497
 8001488:	080014b7 	.word	0x080014b7
 800148c:	080014a7 	.word	0x080014a7
		case display_traffic_lane1:
			fsm_auto_run_lane1();
 8001490:	f7ff fae2 	bl	8000a58 <fsm_auto_run_lane1>
			break;
 8001494:	e018      	b.n	80014c8 <fsm_traffic_lane1_run+0x5c>
		case modify_red1:
			off_greenyellow_lane1();
 8001496:	f000 fcb1 	bl	8001dfc <off_greenyellow_lane1>
			//toggle_red1();
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, SET);
 800149a:	2201      	movs	r2, #1
 800149c:	2102      	movs	r1, #2
 800149e:	480c      	ldr	r0, [pc, #48]	; (80014d0 <fsm_traffic_lane1_run+0x64>)
 80014a0:	f001 f813 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 80014a4:	e010      	b.n	80014c8 <fsm_traffic_lane1_run+0x5c>
		case modify_yellow1:
			off_redgreen_lane1();
 80014a6:	f000 fc89 	bl	8001dbc <off_redgreen_lane1>
			//toggle_yellow1();
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, SET);
 80014aa:	2201      	movs	r2, #1
 80014ac:	2108      	movs	r1, #8
 80014ae:	4808      	ldr	r0, [pc, #32]	; (80014d0 <fsm_traffic_lane1_run+0x64>)
 80014b0:	f001 f80b 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 80014b4:	e008      	b.n	80014c8 <fsm_traffic_lane1_run+0x5c>
		case modify_green1:
			off_redyellow_lane1();
 80014b6:	f000 fc91 	bl	8001ddc <off_redyellow_lane1>
			//toggle_green1();
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, SET);
 80014ba:	2201      	movs	r2, #1
 80014bc:	2104      	movs	r1, #4
 80014be:	4804      	ldr	r0, [pc, #16]	; (80014d0 <fsm_traffic_lane1_run+0x64>)
 80014c0:	f001 f803 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 80014c4:	e000      	b.n	80014c8 <fsm_traffic_lane1_run+0x5c>
		default:
			break;
 80014c6:	bf00      	nop
	}
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000044 	.word	0x20000044
 80014d0:	40010800 	.word	0x40010800

080014d4 <fsm_traffic_lane2_run>:

void fsm_traffic_lane2_run(){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
	switch(status_traffic_lane2){
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <fsm_traffic_lane2_run+0x84>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3b23      	subs	r3, #35	; 0x23
 80014de:	2b0c      	cmp	r3, #12
 80014e0:	d837      	bhi.n	8001552 <fsm_traffic_lane2_run+0x7e>
 80014e2:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <fsm_traffic_lane2_run+0x14>)
 80014e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e8:	0800151d 	.word	0x0800151d
 80014ec:	08001553 	.word	0x08001553
 80014f0:	08001553 	.word	0x08001553
 80014f4:	08001553 	.word	0x08001553
 80014f8:	08001553 	.word	0x08001553
 80014fc:	08001553 	.word	0x08001553
 8001500:	08001553 	.word	0x08001553
 8001504:	08001553 	.word	0x08001553
 8001508:	08001553 	.word	0x08001553
 800150c:	08001553 	.word	0x08001553
 8001510:	08001523 	.word	0x08001523
 8001514:	08001533 	.word	0x08001533
 8001518:	08001543 	.word	0x08001543
		case display_traffic_lane2:
			fsm_auto_run_lane2();
 800151c:	f7ff fbcc 	bl	8000cb8 <fsm_auto_run_lane2>
			break;
 8001520:	e018      	b.n	8001554 <fsm_traffic_lane2_run+0x80>
		case modify_red2:
			off_greenyellow_lane2();
 8001522:	f000 fc9b 	bl	8001e5c <off_greenyellow_lane2>
			//toggle_red2();
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, SET);
 8001526:	2201      	movs	r2, #1
 8001528:	2110      	movs	r1, #16
 800152a:	480c      	ldr	r0, [pc, #48]	; (800155c <fsm_traffic_lane2_run+0x88>)
 800152c:	f000 ffcd 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 8001530:	e010      	b.n	8001554 <fsm_traffic_lane2_run+0x80>
		case modify_green2:
			off_redyellow_lane2();
 8001532:	f000 fc83 	bl	8001e3c <off_redyellow_lane2>
			//toggle_green2();
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, SET);
 8001536:	2201      	movs	r2, #1
 8001538:	2120      	movs	r1, #32
 800153a:	4808      	ldr	r0, [pc, #32]	; (800155c <fsm_traffic_lane2_run+0x88>)
 800153c:	f000 ffc5 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 8001540:	e008      	b.n	8001554 <fsm_traffic_lane2_run+0x80>
		case modify_yellow2:
			off_redgreen_lane2();
 8001542:	f000 fc6b 	bl	8001e1c <off_redgreen_lane2>
			//toggle_yellow2();
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, SET);
 8001546:	2201      	movs	r2, #1
 8001548:	2140      	movs	r1, #64	; 0x40
 800154a:	4804      	ldr	r0, [pc, #16]	; (800155c <fsm_traffic_lane2_run+0x88>)
 800154c:	f000 ffbd 	bl	80024ca <HAL_GPIO_WritePin>
			break;
 8001550:	e000      	b.n	8001554 <fsm_traffic_lane2_run+0x80>
		default:
			break;
 8001552:	bf00      	nop
	}
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000048 	.word	0x20000048
 800155c:	40010800 	.word	0x40010800

08001560 <toggle_led_red>:
#include "led.h"

void toggle_led_red(){
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_BLINKY_GPIO_Port, LED_BLINKY_Pin);
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	4802      	ldr	r0, [pc, #8]	; (8001570 <toggle_led_red+0x10>)
 8001568:	f000 ffc7 	bl	80024fa <HAL_GPIO_TogglePin>
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40010800 	.word	0x40010800

08001574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001578:	f000 fca6 	bl	8001ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800157c:	f000 f834 	bl	80015e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001580:	f000 f8ba 	bl	80016f8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001584:	f000 f86c 	bl	8001660 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001588:	4811      	ldr	r0, [pc, #68]	; (80015d0 <main+0x5c>)
 800158a:	f001 fc07 	bl	8002d9c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 800158e:	f000 f96f 	bl	8001870 <SCH_Init>
//  setTimer(9, 500);

  //SCH_Add_Task(fsm_auto_run_lane1, 0, 10);
  //SCH_Add_Task(fsm_auto_run_lane2, 0, 10);

  SCH_Add_Task(fsm_traffic_lane1_run, 10, 10);
 8001592:	220a      	movs	r2, #10
 8001594:	210a      	movs	r1, #10
 8001596:	480f      	ldr	r0, [pc, #60]	; (80015d4 <main+0x60>)
 8001598:	f000 fa38 	bl	8001a0c <SCH_Add_Task>
  SCH_Add_Task(fsm_traffic_lane2_run, 10, 10);
 800159c:	220a      	movs	r2, #10
 800159e:	210a      	movs	r1, #10
 80015a0:	480d      	ldr	r0, [pc, #52]	; (80015d8 <main+0x64>)
 80015a2:	f000 fa33 	bl	8001a0c <SCH_Add_Task>

  //SCH_Add_Task(FSMDisplayLED1, 0, 10);
  //SCH_Add_Task(FSMDisplayLED2, 0, 10);

  SCH_Add_Task(FSM_Display_2LED, 10, 500);
 80015a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015aa:	210a      	movs	r1, #10
 80015ac:	480b      	ldr	r0, [pc, #44]	; (80015dc <main+0x68>)
 80015ae:	f000 fa2d 	bl	8001a0c <SCH_Add_Task>
  //SCH_Add_Task(getKeyInput1, 0, 1);
  //SCH_Add_Task(getKeyInput2, 0, 1);
  //SCH_Add_Task(getKeyInput3, 0, 1);

  SCH_Add_Task(fsm_manual_run, 10, 10);
 80015b2:	220a      	movs	r2, #10
 80015b4:	210a      	movs	r1, #10
 80015b6:	480a      	ldr	r0, [pc, #40]	; (80015e0 <main+0x6c>)
 80015b8:	f000 fa28 	bl	8001a0c <SCH_Add_Task>

  SCH_Add_Task(toggle_led_red, 1000, 1000);
 80015bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015c4:	4807      	ldr	r0, [pc, #28]	; (80015e4 <main+0x70>)
 80015c6:	f000 fa21 	bl	8001a0c <SCH_Add_Task>
//		fsm_traffic_lane2_run();

	  //fsm_manual_run();


	  SCH_Dispatch_Tasks();
 80015ca:	f000 f9d5 	bl	8001978 <SCH_Dispatch_Tasks>
 80015ce:	e7fc      	b.n	80015ca <main+0x56>
 80015d0:	20000144 	.word	0x20000144
 80015d4:	0800146d 	.word	0x0800146d
 80015d8:	080014d5 	.word	0x080014d5
 80015dc:	0800145d 	.word	0x0800145d
 80015e0:	08000f1d 	.word	0x08000f1d
 80015e4:	08001561 	.word	0x08001561

080015e8 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b090      	sub	sp, #64	; 0x40
 80015ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ee:	f107 0318 	add.w	r3, r7, #24
 80015f2:	2228      	movs	r2, #40	; 0x28
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f001 ff88 	bl	800350c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800160a:	2302      	movs	r3, #2
 800160c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800160e:	2301      	movs	r3, #1
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001612:	2310      	movs	r3, #16
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001616:	2300      	movs	r3, #0
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161a:	f107 0318 	add.w	r3, r7, #24
 800161e:	4618      	mov	r0, r3
 8001620:	f000 ff84 	bl	800252c <HAL_RCC_OscConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800162a:	f000 f8db 	bl	80017e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162e:	230f      	movs	r3, #15
 8001630:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f001 f9f0 	bl	8002a2c <HAL_RCC_ClockConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001652:	f000 f8c7 	bl	80017e4 <Error_Handler>
  }
}
 8001656:	bf00      	nop
 8001658:	3740      	adds	r7, #64	; 0x40
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001674:	463b      	mov	r3, r7
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800167c:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <MX_TIM2_Init+0x94>)
 800167e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001682:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <MX_TIM2_Init+0x94>)
 8001686:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800168a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168c:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <MX_TIM2_Init+0x94>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <MX_TIM2_Init+0x94>)
 8001694:	2209      	movs	r2, #9
 8001696:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <MX_TIM2_Init+0x94>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <MX_TIM2_Init+0x94>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016a4:	4813      	ldr	r0, [pc, #76]	; (80016f4 <MX_TIM2_Init+0x94>)
 80016a6:	f001 fb29 	bl	8002cfc <HAL_TIM_Base_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016b0:	f000 f898 	bl	80017e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016ba:	f107 0308 	add.w	r3, r7, #8
 80016be:	4619      	mov	r1, r3
 80016c0:	480c      	ldr	r0, [pc, #48]	; (80016f4 <MX_TIM2_Init+0x94>)
 80016c2:	f001 fcbf 	bl	8003044 <HAL_TIM_ConfigClockSource>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016cc:	f000 f88a 	bl	80017e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016d8:	463b      	mov	r3, r7
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_TIM2_Init+0x94>)
 80016de:	f001 fe87 	bl	80033f0 <HAL_TIMEx_MasterConfigSynchronization>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016e8:	f000 f87c 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000144 	.word	0x20000144

080016f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170c:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <MX_GPIO_Init+0xbc>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a28      	ldr	r2, [pc, #160]	; (80017b4 <MX_GPIO_Init+0xbc>)
 8001712:	f043 0304 	orr.w	r3, r3, #4
 8001716:	6193      	str	r3, [r2, #24]
 8001718:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <MX_GPIO_Init+0xbc>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001724:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <MX_GPIO_Init+0xbc>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	4a22      	ldr	r2, [pc, #136]	; (80017b4 <MX_GPIO_Init+0xbc>)
 800172a:	f043 0308 	orr.w	r3, r3, #8
 800172e:	6193      	str	r3, [r2, #24]
 8001730:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <MX_GPIO_Init+0xbc>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red1_Pin|green1_Pin|yellow1_Pin|red2_Pin
 800173c:	2200      	movs	r2, #0
 800173e:	f64f 01fe 	movw	r1, #63742	; 0xf8fe
 8001742:	481d      	ldr	r0, [pc, #116]	; (80017b8 <MX_GPIO_Init+0xc0>)
 8001744:	f000 fec1 	bl	80024ca <HAL_GPIO_WritePin>
                          |green2_Pin|yellow2_Pin|LED_BLINKY_Pin|aa_Pin
                          |bb_Pin|cc_Pin|dd_Pin|ee_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|EN2_Pin
 8001748:	2200      	movs	r2, #0
 800174a:	f643 717f 	movw	r1, #16255	; 0x3f7f
 800174e:	481b      	ldr	r0, [pc, #108]	; (80017bc <MX_GPIO_Init+0xc4>)
 8001750:	f000 febb 	bl	80024ca <HAL_GPIO_WritePin>
                          |EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : red1_Pin green1_Pin yellow1_Pin red2_Pin
                           green2_Pin yellow2_Pin LED_BLINKY_Pin aa_Pin
                           bb_Pin cc_Pin dd_Pin ee_Pin */
  GPIO_InitStruct.Pin = red1_Pin|green1_Pin|yellow1_Pin|red2_Pin
 8001754:	f64f 03fe 	movw	r3, #63742	; 0xf8fe
 8001758:	60bb      	str	r3, [r7, #8]
                          |green2_Pin|yellow2_Pin|LED_BLINKY_Pin|aa_Pin
                          |bb_Pin|cc_Pin|dd_Pin|ee_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2302      	movs	r3, #2
 8001764:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	f107 0308 	add.w	r3, r7, #8
 800176a:	4619      	mov	r1, r3
 800176c:	4812      	ldr	r0, [pc, #72]	; (80017b8 <MX_GPIO_Init+0xc0>)
 800176e:	f000 fd1b 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin EN2_Pin
                           EN3_Pin ff_Pin gg_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin EN0_Pin
                           EN1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|EN2_Pin
 8001772:	f643 737f 	movw	r3, #16255	; 0x3f7f
 8001776:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin|ff_Pin|gg_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|EN0_Pin
                          |EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001778:	2301      	movs	r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2302      	movs	r3, #2
 8001782:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	f107 0308 	add.w	r3, r7, #8
 8001788:	4619      	mov	r1, r3
 800178a:	480c      	ldr	r0, [pc, #48]	; (80017bc <MX_GPIO_Init+0xc4>)
 800178c:	f000 fd0c 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001790:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001794:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179a:	2301      	movs	r3, #1
 800179c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	4619      	mov	r1, r3
 80017a4:	4804      	ldr	r0, [pc, #16]	; (80017b8 <MX_GPIO_Init+0xc0>)
 80017a6:	f000 fcff 	bl	80021a8 <HAL_GPIO_Init>

}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010800 	.word	0x40010800
 80017bc:	40010c00 	.word	0x40010c00

080017c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80017c8:	f000 f868 	bl	800189c <SCH_Update>
	timerRun();
 80017cc:	f000 f9c2 	bl	8001b54 <timerRun>
	//getKeyInput();
	//getkey();
	getKeyInput1();
 80017d0:	f7fe fcf2 	bl	80001b8 <getKeyInput1>
	getKeyInput2();
 80017d4:	f7fe fd4c 	bl	8000270 <getKeyInput2>
	getKeyInput3();
 80017d8:	f7fe fda6 	bl	8000328 <getKeyInput3>

}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e8:	b672      	cpsid	i
}
 80017ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ec:	e7fe      	b.n	80017ec <Error_Handler+0x8>
	...

080017f0 <SCH_Delete_Task>:
#include <scheduler.h>

sTasks SCH_tasks_G[SCH_MAX_TASK];

void SCH_Delete_Task(const unsigned char TASK_INDEX) {
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
	if (TASK_INDEX < SCH_MAX_TASK ) {
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	2b09      	cmp	r3, #9
 80017fe:	d830      	bhi.n	8001862 <SCH_Delete_Task+0x72>
		SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 8001800:	79fa      	ldrb	r2, [r7, #7]
 8001802:	491a      	ldr	r1, [pc, #104]	; (800186c <SCH_Delete_Task+0x7c>)
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[TASK_INDEX].Delay = 0;
 8001812:	79fa      	ldrb	r2, [r7, #7]
 8001814:	4915      	ldr	r1, [pc, #84]	; (800186c <SCH_Delete_Task+0x7c>)
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	440b      	add	r3, r1
 8001820:	3304      	adds	r3, #4
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[TASK_INDEX].Period = 0;
 8001826:	79fa      	ldrb	r2, [r7, #7]
 8001828:	4910      	ldr	r1, [pc, #64]	; (800186c <SCH_Delete_Task+0x7c>)
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	440b      	add	r3, r1
 8001834:	3308      	adds	r3, #8
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[TASK_INDEX].Runme = 0;
 800183a:	79fa      	ldrb	r2, [r7, #7]
 800183c:	490b      	ldr	r1, [pc, #44]	; (800186c <SCH_Delete_Task+0x7c>)
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	330c      	adds	r3, #12
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[TASK_INDEX].TaskID = 0;
 800184e:	79fa      	ldrb	r2, [r7, #7]
 8001850:	4906      	ldr	r1, [pc, #24]	; (800186c <SCH_Delete_Task+0x7c>)
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	3310      	adds	r3, #16
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
	}
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	2000018c 	.word	0x2000018c

08001870 <SCH_Init>:

void SCH_Init(void) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
	unsigned char i;
	for (i = 0; i < SCH_MAX_TASK; i++) {
 8001876:	2300      	movs	r3, #0
 8001878:	71fb      	strb	r3, [r7, #7]
 800187a:	e006      	b.n	800188a <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ffb6 	bl	80017f0 <SCH_Delete_Task>
	for (i = 0; i < SCH_MAX_TASK; i++) {
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	3301      	adds	r3, #1
 8001888:	71fb      	strb	r3, [r7, #7]
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	2b09      	cmp	r3, #9
 800188e:	d9f5      	bls.n	800187c <SCH_Init+0xc>
	}
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <SCH_Update>:

void SCH_Update(void) {
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
	unsigned char Index;
	for (Index = 0; Index < SCH_MAX_TASK; Index++) {
 80018a2:	2300      	movs	r3, #0
 80018a4:	71fb      	strb	r3, [r7, #7]
 80018a6:	e05c      	b.n	8001962 <SCH_Update+0xc6>
		if (SCH_tasks_G[Index].pTask) {
 80018a8:	79fa      	ldrb	r2, [r7, #7]
 80018aa:	4932      	ldr	r1, [pc, #200]	; (8001974 <SCH_Update+0xd8>)
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d04f      	beq.n	800195c <SCH_Update+0xc0>
			if (SCH_tasks_G[Index].Delay == 0) {
 80018bc:	79fa      	ldrb	r2, [r7, #7]
 80018be:	492d      	ldr	r1, [pc, #180]	; (8001974 <SCH_Update+0xd8>)
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	3304      	adds	r3, #4
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d132      	bne.n	8001938 <SCH_Update+0x9c>
				SCH_tasks_G[Index].Runme += 1;
 80018d2:	79fa      	ldrb	r2, [r7, #7]
 80018d4:	4927      	ldr	r1, [pc, #156]	; (8001974 <SCH_Update+0xd8>)
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	330c      	adds	r3, #12
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	79fa      	ldrb	r2, [r7, #7]
 80018e6:	3301      	adds	r3, #1
 80018e8:	b2d8      	uxtb	r0, r3
 80018ea:	4922      	ldr	r1, [pc, #136]	; (8001974 <SCH_Update+0xd8>)
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	440b      	add	r3, r1
 80018f6:	330c      	adds	r3, #12
 80018f8:	4602      	mov	r2, r0
 80018fa:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[Index].Period){
 80018fc:	79fa      	ldrb	r2, [r7, #7]
 80018fe:	491d      	ldr	r1, [pc, #116]	; (8001974 <SCH_Update+0xd8>)
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	3308      	adds	r3, #8
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d024      	beq.n	800195c <SCH_Update+0xc0>
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8001912:	79f9      	ldrb	r1, [r7, #7]
 8001914:	79fa      	ldrb	r2, [r7, #7]
 8001916:	4817      	ldr	r0, [pc, #92]	; (8001974 <SCH_Update+0xd8>)
 8001918:	460b      	mov	r3, r1
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4403      	add	r3, r0
 8001922:	3308      	adds	r3, #8
 8001924:	6819      	ldr	r1, [r3, #0]
 8001926:	4813      	ldr	r0, [pc, #76]	; (8001974 <SCH_Update+0xd8>)
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4403      	add	r3, r0
 8001932:	3304      	adds	r3, #4
 8001934:	6019      	str	r1, [r3, #0]
 8001936:	e011      	b.n	800195c <SCH_Update+0xc0>
				}
			}
			else {
				SCH_tasks_G[Index].Delay--;
 8001938:	79fa      	ldrb	r2, [r7, #7]
 800193a:	490e      	ldr	r1, [pc, #56]	; (8001974 <SCH_Update+0xd8>)
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	3304      	adds	r3, #4
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	1e59      	subs	r1, r3, #1
 800194c:	4809      	ldr	r0, [pc, #36]	; (8001974 <SCH_Update+0xd8>)
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4403      	add	r3, r0
 8001958:	3304      	adds	r3, #4
 800195a:	6019      	str	r1, [r3, #0]
	for (Index = 0; Index < SCH_MAX_TASK; Index++) {
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	3301      	adds	r3, #1
 8001960:	71fb      	strb	r3, [r7, #7]
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	2b09      	cmp	r3, #9
 8001966:	d99f      	bls.n	80018a8 <SCH_Update+0xc>
			}
		}
	}
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	2000018c 	.word	0x2000018c

08001978 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
	unsigned char Index;
	for (Index = 0; Index < SCH_MAX_TASK; Index++) {
 800197e:	2300      	movs	r3, #0
 8001980:	71fb      	strb	r3, [r7, #7]
 8001982:	e039      	b.n	80019f8 <SCH_Dispatch_Tasks+0x80>
		if (SCH_tasks_G[Index].Runme > 0) {
 8001984:	79fa      	ldrb	r2, [r7, #7]
 8001986:	4920      	ldr	r1, [pc, #128]	; (8001a08 <SCH_Dispatch_Tasks+0x90>)
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	330c      	adds	r3, #12
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d02b      	beq.n	80019f2 <SCH_Dispatch_Tasks+0x7a>
			(*SCH_tasks_G[Index].pTask)();
 800199a:	79fa      	ldrb	r2, [r7, #7]
 800199c:	491a      	ldr	r1, [pc, #104]	; (8001a08 <SCH_Dispatch_Tasks+0x90>)
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4798      	blx	r3
			SCH_tasks_G[Index].Runme--;
 80019ac:	79fa      	ldrb	r2, [r7, #7]
 80019ae:	4916      	ldr	r1, [pc, #88]	; (8001a08 <SCH_Dispatch_Tasks+0x90>)
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	330c      	adds	r3, #12
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	3b01      	subs	r3, #1
 80019c0:	b2d8      	uxtb	r0, r3
 80019c2:	4911      	ldr	r1, [pc, #68]	; (8001a08 <SCH_Dispatch_Tasks+0x90>)
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	330c      	adds	r3, #12
 80019d0:	4602      	mov	r2, r0
 80019d2:	701a      	strb	r2, [r3, #0]
			if (SCH_tasks_G[Index].Period == 0) {
 80019d4:	79fa      	ldrb	r2, [r7, #7]
 80019d6:	490c      	ldr	r1, [pc, #48]	; (8001a08 <SCH_Dispatch_Tasks+0x90>)
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	3308      	adds	r3, #8
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d103      	bne.n	80019f2 <SCH_Dispatch_Tasks+0x7a>
				SCH_Delete_Task(Index);
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff feff 	bl	80017f0 <SCH_Delete_Task>
	for (Index = 0; Index < SCH_MAX_TASK; Index++) {
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	3301      	adds	r3, #1
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	2b09      	cmp	r3, #9
 80019fc:	d9c2      	bls.n	8001984 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 80019fe:	bf00      	nop
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	2000018c 	.word	0x2000018c

08001a0c <SCH_Add_Task>:
void SCH_Add_Task(void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
	unsigned char Index = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASK)) {
 8001a1c:	e002      	b.n	8001a24 <SCH_Add_Task+0x18>
		Index++;
 8001a1e:	7dfb      	ldrb	r3, [r7, #23]
 8001a20:	3301      	adds	r3, #1
 8001a22:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASK)) {
 8001a24:	7dfa      	ldrb	r2, [r7, #23]
 8001a26:	4926      	ldr	r1, [pc, #152]	; (8001ac0 <SCH_Add_Task+0xb4>)
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <SCH_Add_Task+0x32>
 8001a38:	7dfb      	ldrb	r3, [r7, #23]
 8001a3a:	2b09      	cmp	r3, #9
 8001a3c:	d9ef      	bls.n	8001a1e <SCH_Add_Task+0x12>
	}
	if (Index < SCH_MAX_TASK) {
 8001a3e:	7dfb      	ldrb	r3, [r7, #23]
 8001a40:	2b09      	cmp	r3, #9
 8001a42:	d838      	bhi.n	8001ab6 <SCH_Add_Task+0xaa>
		SCH_tasks_G[Index].pTask = pFunction;
 8001a44:	7dfa      	ldrb	r2, [r7, #23]
 8001a46:	491e      	ldr	r1, [pc, #120]	; (8001ac0 <SCH_Add_Task+0xb4>)
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[Index].Delay = DELAY/TICK;
 8001a56:	7dfa      	ldrb	r2, [r7, #23]
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	491a      	ldr	r1, [pc, #104]	; (8001ac4 <SCH_Add_Task+0xb8>)
 8001a5c:	fba1 1303 	umull	r1, r3, r1, r3
 8001a60:	08d9      	lsrs	r1, r3, #3
 8001a62:	4817      	ldr	r0, [pc, #92]	; (8001ac0 <SCH_Add_Task+0xb4>)
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4403      	add	r3, r0
 8001a6e:	3304      	adds	r3, #4
 8001a70:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[Index].Period = PERIOD/TICK;
 8001a72:	7dfa      	ldrb	r2, [r7, #23]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4913      	ldr	r1, [pc, #76]	; (8001ac4 <SCH_Add_Task+0xb8>)
 8001a78:	fba1 1303 	umull	r1, r3, r1, r3
 8001a7c:	08d9      	lsrs	r1, r3, #3
 8001a7e:	4810      	ldr	r0, [pc, #64]	; (8001ac0 <SCH_Add_Task+0xb4>)
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4403      	add	r3, r0
 8001a8a:	3308      	adds	r3, #8
 8001a8c:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[Index].Runme = 0;
 8001a8e:	7dfa      	ldrb	r2, [r7, #23]
 8001a90:	490b      	ldr	r1, [pc, #44]	; (8001ac0 <SCH_Add_Task+0xb4>)
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	330c      	adds	r3, #12
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[Index].TaskID = Index;
 8001aa2:	7dfa      	ldrb	r2, [r7, #23]
 8001aa4:	7df9      	ldrb	r1, [r7, #23]
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <SCH_Add_Task+0xb4>)
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4403      	add	r3, r0
 8001ab2:	3310      	adds	r3, #16
 8001ab4:	6019      	str	r1, [r3, #0]
	}
}
 8001ab6:	bf00      	nop
 8001ab8:	371c      	adds	r7, #28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	2000018c 	.word	0x2000018c
 8001ac4:	cccccccd 	.word	0xcccccccd

08001ac8 <setTimer>:

int timer_counter[10] = {0};
int timer_flag[10] = {0};


void setTimer(int i, int duration){
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
	timer_flag[i] = 0;
 8001ad2:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <setTimer+0x30>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[i] = duration/TICK;
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <setTimer+0x34>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	fb92 f2f3 	sdiv	r2, r2, r3
 8001ae6:	4906      	ldr	r1, [pc, #24]	; (8001b00 <setTimer+0x38>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	2000011c 	.word	0x2000011c
 8001afc:	2000007c 	.word	0x2000007c
 8001b00:	200000f4 	.word	0x200000f4

08001b04 <timer_run>:
void timer_run(int i){
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	if(timer_counter[i] > 0){
 8001b0c:	4a0f      	ldr	r2, [pc, #60]	; (8001b4c <timer_run+0x48>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	dd13      	ble.n	8001b40 <timer_run+0x3c>
		timer_counter[i]--;
 8001b18:	4a0c      	ldr	r2, [pc, #48]	; (8001b4c <timer_run+0x48>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b20:	1e5a      	subs	r2, r3, #1
 8001b22:	490a      	ldr	r1, [pc, #40]	; (8001b4c <timer_run+0x48>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[i] <= 0) timer_flag[i] = 1;
 8001b2a:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <timer_run+0x48>)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	dc04      	bgt.n	8001b40 <timer_run+0x3c>
 8001b36:	4a06      	ldr	r2, [pc, #24]	; (8001b50 <timer_run+0x4c>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	200000f4 	.word	0x200000f4
 8001b50:	2000011c 	.word	0x2000011c

08001b54 <timerRun>:
void timerRun(){
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
	timer_run(0);
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f7ff ffd3 	bl	8001b04 <timer_run>
	timer_run(1);
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f7ff ffd0 	bl	8001b04 <timer_run>
	timer_run(2);
 8001b64:	2002      	movs	r0, #2
 8001b66:	f7ff ffcd 	bl	8001b04 <timer_run>
	timer_run(3);
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	f7ff ffca 	bl	8001b04 <timer_run>
	timer_run(4);
 8001b70:	2004      	movs	r0, #4
 8001b72:	f7ff ffc7 	bl	8001b04 <timer_run>
	timer_run(5);
 8001b76:	2005      	movs	r0, #5
 8001b78:	f7ff ffc4 	bl	8001b04 <timer_run>
	timer_run(6);
 8001b7c:	2006      	movs	r0, #6
 8001b7e:	f7ff ffc1 	bl	8001b04 <timer_run>
	timer_run(7);
 8001b82:	2007      	movs	r0, #7
 8001b84:	f7ff ffbe 	bl	8001b04 <timer_run>
	timer_run(8);
 8001b88:	2008      	movs	r0, #8
 8001b8a:	f7ff ffbb 	bl	8001b04 <timer_run>
	timer_run(9);
 8001b8e:	2009      	movs	r0, #9
 8001b90:	f7ff ffb8 	bl	8001b04 <timer_run>

}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_MspInit+0x5c>)
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	4a14      	ldr	r2, [pc, #80]	; (8001bf4 <HAL_MspInit+0x5c>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6193      	str	r3, [r2, #24]
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_MspInit+0x5c>)
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <HAL_MspInit+0x5c>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <HAL_MspInit+0x5c>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	61d3      	str	r3, [r2, #28]
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <HAL_MspInit+0x5c>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <HAL_MspInit+0x60>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <HAL_MspInit+0x60>)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40010000 	.word	0x40010000

08001bfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c0c:	d113      	bne.n	8001c36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <HAL_TIM_Base_MspInit+0x44>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	4a0b      	ldr	r2, [pc, #44]	; (8001c40 <HAL_TIM_Base_MspInit+0x44>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	61d3      	str	r3, [r2, #28]
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_TIM_Base_MspInit+0x44>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2100      	movs	r1, #0
 8001c2a:	201c      	movs	r0, #28
 8001c2c:	f000 fa85 	bl	800213a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c30:	201c      	movs	r0, #28
 8001c32:	f000 fa9e 	bl	8002172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000

08001c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <NMI_Handler+0x4>

08001c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <HardFault_Handler+0x4>

08001c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <MemManage_Handler+0x4>

08001c56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <BusFault_Handler+0x4>

08001c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <UsageFault_Handler+0x4>

08001c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c8a:	f000 f963 	bl	8001f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <TIM2_IRQHandler+0x10>)
 8001c9a:	f001 f8cb 	bl	8002e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000144 	.word	0x20000144

08001ca8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <red_1>:
#include "traffic_2_lane.h"

void red_1(void){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	2102      	movs	r1, #2
 8001cbc:	4807      	ldr	r0, [pc, #28]	; (8001cdc <red_1+0x28>)
 8001cbe:	f000 fc04 	bl	80024ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	4805      	ldr	r0, [pc, #20]	; (8001cdc <red_1+0x28>)
 8001cc8:	f000 fbff 	bl	80024ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2108      	movs	r1, #8
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <red_1+0x28>)
 8001cd2:	f000 fbfa 	bl	80024ca <HAL_GPIO_WritePin>
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40010800 	.word	0x40010800

08001ce0 <green_1>:

void green_1(void){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2102      	movs	r1, #2
 8001ce8:	4807      	ldr	r0, [pc, #28]	; (8001d08 <green_1+0x28>)
 8001cea:	f000 fbee 	bl	80024ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2108      	movs	r1, #8
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <green_1+0x28>)
 8001cf4:	f000 fbe9 	bl	80024ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	2104      	movs	r1, #4
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <green_1+0x28>)
 8001cfe:	f000 fbe4 	bl	80024ca <HAL_GPIO_WritePin>
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40010800 	.word	0x40010800

08001d0c <yellow_1>:

void yellow_1(void){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET );
 8001d10:	2200      	movs	r2, #0
 8001d12:	2102      	movs	r1, #2
 8001d14:	4807      	ldr	r0, [pc, #28]	; (8001d34 <yellow_1+0x28>)
 8001d16:	f000 fbd8 	bl	80024ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET );
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	2108      	movs	r1, #8
 8001d1e:	4805      	ldr	r0, [pc, #20]	; (8001d34 <yellow_1+0x28>)
 8001d20:	f000 fbd3 	bl	80024ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET );
 8001d24:	2200      	movs	r2, #0
 8001d26:	2104      	movs	r1, #4
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <yellow_1+0x28>)
 8001d2a:	f000 fbce 	bl	80024ca <HAL_GPIO_WritePin>
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40010800 	.word	0x40010800

08001d38 <red_2>:

void red_2(void) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	2110      	movs	r1, #16
 8001d40:	4807      	ldr	r0, [pc, #28]	; (8001d60 <red_2+0x28>)
 8001d42:	f000 fbc2 	bl	80024ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2120      	movs	r1, #32
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <red_2+0x28>)
 8001d4c:	f000 fbbd 	bl	80024ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2140      	movs	r1, #64	; 0x40
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <red_2+0x28>)
 8001d56:	f000 fbb8 	bl	80024ca <HAL_GPIO_WritePin>
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40010800 	.word	0x40010800

08001d64 <green_2>:

void green_2(void) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2110      	movs	r1, #16
 8001d6c:	4807      	ldr	r0, [pc, #28]	; (8001d8c <green_2+0x28>)
 8001d6e:	f000 fbac 	bl	80024ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2140      	movs	r1, #64	; 0x40
 8001d76:	4805      	ldr	r0, [pc, #20]	; (8001d8c <green_2+0x28>)
 8001d78:	f000 fba7 	bl	80024ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	2120      	movs	r1, #32
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <green_2+0x28>)
 8001d82:	f000 fba2 	bl	80024ca <HAL_GPIO_WritePin>
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40010800 	.word	0x40010800

08001d90 <yellow_2>:

void yellow_2(void){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET );
 8001d94:	2200      	movs	r2, #0
 8001d96:	2110      	movs	r1, #16
 8001d98:	4807      	ldr	r0, [pc, #28]	; (8001db8 <yellow_2+0x28>)
 8001d9a:	f000 fb96 	bl	80024ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET );
 8001d9e:	2201      	movs	r2, #1
 8001da0:	2140      	movs	r1, #64	; 0x40
 8001da2:	4805      	ldr	r0, [pc, #20]	; (8001db8 <yellow_2+0x28>)
 8001da4:	f000 fb91 	bl	80024ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET );
 8001da8:	2200      	movs	r2, #0
 8001daa:	2120      	movs	r1, #32
 8001dac:	4802      	ldr	r0, [pc, #8]	; (8001db8 <yellow_2+0x28>)
 8001dae:	f000 fb8c 	bl	80024ca <HAL_GPIO_WritePin>
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40010800 	.word	0x40010800

08001dbc <off_redgreen_lane1>:





void off_redgreen_lane1(){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2102      	movs	r1, #2
 8001dc4:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <off_redgreen_lane1+0x1c>)
 8001dc6:	f000 fb80 	bl	80024ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2104      	movs	r1, #4
 8001dce:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <off_redgreen_lane1+0x1c>)
 8001dd0:	f000 fb7b 	bl	80024ca <HAL_GPIO_WritePin>
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40010800 	.word	0x40010800

08001ddc <off_redyellow_lane1>:
void off_redyellow_lane1(){
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2102      	movs	r1, #2
 8001de4:	4804      	ldr	r0, [pc, #16]	; (8001df8 <off_redyellow_lane1+0x1c>)
 8001de6:	f000 fb70 	bl	80024ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2108      	movs	r1, #8
 8001dee:	4802      	ldr	r0, [pc, #8]	; (8001df8 <off_redyellow_lane1+0x1c>)
 8001df0:	f000 fb6b 	bl	80024ca <HAL_GPIO_WritePin>
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40010800 	.word	0x40010800

08001dfc <off_greenyellow_lane1>:
void off_greenyellow_lane1(){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2104      	movs	r1, #4
 8001e04:	4804      	ldr	r0, [pc, #16]	; (8001e18 <off_greenyellow_lane1+0x1c>)
 8001e06:	f000 fb60 	bl	80024ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2108      	movs	r1, #8
 8001e0e:	4802      	ldr	r0, [pc, #8]	; (8001e18 <off_greenyellow_lane1+0x1c>)
 8001e10:	f000 fb5b 	bl	80024ca <HAL_GPIO_WritePin>
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40010800 	.word	0x40010800

08001e1c <off_redgreen_lane2>:





void off_redgreen_lane2(){
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET );
 8001e20:	2200      	movs	r2, #0
 8001e22:	2110      	movs	r1, #16
 8001e24:	4804      	ldr	r0, [pc, #16]	; (8001e38 <off_redgreen_lane2+0x1c>)
 8001e26:	f000 fb50 	bl	80024ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2120      	movs	r1, #32
 8001e2e:	4802      	ldr	r0, [pc, #8]	; (8001e38 <off_redgreen_lane2+0x1c>)
 8001e30:	f000 fb4b 	bl	80024ca <HAL_GPIO_WritePin>
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40010800 	.word	0x40010800

08001e3c <off_redyellow_lane2>:
void off_redyellow_lane2(){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2110      	movs	r1, #16
 8001e44:	4804      	ldr	r0, [pc, #16]	; (8001e58 <off_redyellow_lane2+0x1c>)
 8001e46:	f000 fb40 	bl	80024ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2140      	movs	r1, #64	; 0x40
 8001e4e:	4802      	ldr	r0, [pc, #8]	; (8001e58 <off_redyellow_lane2+0x1c>)
 8001e50:	f000 fb3b 	bl	80024ca <HAL_GPIO_WritePin>
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40010800 	.word	0x40010800

08001e5c <off_greenyellow_lane2>:
void off_greenyellow_lane2(){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2120      	movs	r1, #32
 8001e64:	4804      	ldr	r0, [pc, #16]	; (8001e78 <off_greenyellow_lane2+0x1c>)
 8001e66:	f000 fb30 	bl	80024ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2140      	movs	r1, #64	; 0x40
 8001e6e:	4802      	ldr	r0, [pc, #8]	; (8001e78 <off_greenyellow_lane2+0x1c>)
 8001e70:	f000 fb2b 	bl	80024ca <HAL_GPIO_WritePin>

}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40010800 	.word	0x40010800

08001e7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e7c:	480c      	ldr	r0, [pc, #48]	; (8001eb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e7e:	490d      	ldr	r1, [pc, #52]	; (8001eb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e80:	4a0d      	ldr	r2, [pc, #52]	; (8001eb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e84:	e002      	b.n	8001e8c <LoopCopyDataInit>

08001e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e8a:	3304      	adds	r3, #4

08001e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e90:	d3f9      	bcc.n	8001e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e94:	4c0a      	ldr	r4, [pc, #40]	; (8001ec0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e98:	e001      	b.n	8001e9e <LoopFillZerobss>

08001e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e9c:	3204      	adds	r2, #4

08001e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea0:	d3fb      	bcc.n	8001e9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ea2:	f7ff ff01 	bl	8001ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ea6:	f001 fb0d 	bl	80034c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eaa:	f7ff fb63 	bl	8001574 <main>
  bx lr
 8001eae:	4770      	bx	lr
  ldr r0, =_sdata
 8001eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001eb8:	0800355c 	.word	0x0800355c
  ldr r2, =_sbss
 8001ebc:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001ec0:	20000258 	.word	0x20000258

08001ec4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ec4:	e7fe      	b.n	8001ec4 <ADC1_2_IRQHandler>
	...

08001ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <HAL_Init+0x28>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a07      	ldr	r2, [pc, #28]	; (8001ef0 <HAL_Init+0x28>)
 8001ed2:	f043 0310 	orr.w	r3, r3, #16
 8001ed6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed8:	2003      	movs	r0, #3
 8001eda:	f000 f923 	bl	8002124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ede:	200f      	movs	r0, #15
 8001ee0:	f000 f808 	bl	8001ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee4:	f7ff fe58 	bl	8001b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40022000 	.word	0x40022000

08001ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <HAL_InitTick+0x54>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_InitTick+0x58>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f93b 	bl	800218e <HAL_SYSTICK_Config>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00e      	b.n	8001f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b0f      	cmp	r3, #15
 8001f26:	d80a      	bhi.n	8001f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f30:	f000 f903 	bl	800213a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f34:	4a06      	ldr	r2, [pc, #24]	; (8001f50 <HAL_InitTick+0x5c>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e000      	b.n	8001f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000080 	.word	0x20000080
 8001f4c:	20000088 	.word	0x20000088
 8001f50:	20000084 	.word	0x20000084

08001f54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_IncTick+0x1c>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_IncTick+0x20>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	4a03      	ldr	r2, [pc, #12]	; (8001f74 <HAL_IncTick+0x20>)
 8001f66:	6013      	str	r3, [r2, #0]
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	20000088 	.word	0x20000088
 8001f74:	20000254 	.word	0x20000254

08001f78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f7c:	4b02      	ldr	r3, [pc, #8]	; (8001f88 <HAL_GetTick+0x10>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	20000254 	.word	0x20000254

08001f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fbe:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	60d3      	str	r3, [r2, #12]
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <__NVIC_GetPriorityGrouping+0x18>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	f003 0307 	and.w	r3, r3, #7
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	db0b      	blt.n	800201a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	f003 021f 	and.w	r2, r3, #31
 8002008:	4906      	ldr	r1, [pc, #24]	; (8002024 <__NVIC_EnableIRQ+0x34>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	2001      	movs	r0, #1
 8002012:	fa00 f202 	lsl.w	r2, r0, r2
 8002016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	e000e100 	.word	0xe000e100

08002028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	2b00      	cmp	r3, #0
 800203a:	db0a      	blt.n	8002052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	490c      	ldr	r1, [pc, #48]	; (8002074 <__NVIC_SetPriority+0x4c>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	440b      	add	r3, r1
 800204c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002050:	e00a      	b.n	8002068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4908      	ldr	r1, [pc, #32]	; (8002078 <__NVIC_SetPriority+0x50>)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	3b04      	subs	r3, #4
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	440b      	add	r3, r1
 8002066:	761a      	strb	r2, [r3, #24]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000e100 	.word	0xe000e100
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f1c3 0307 	rsb	r3, r3, #7
 8002096:	2b04      	cmp	r3, #4
 8002098:	bf28      	it	cs
 800209a:	2304      	movcs	r3, #4
 800209c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d902      	bls.n	80020ac <NVIC_EncodePriority+0x30>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3b03      	subs	r3, #3
 80020aa:	e000      	b.n	80020ae <NVIC_EncodePriority+0x32>
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43d9      	mvns	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	4313      	orrs	r3, r2
         );
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	; 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f0:	d301      	bcc.n	80020f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f2:	2301      	movs	r3, #1
 80020f4:	e00f      	b.n	8002116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f6:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <SysTick_Config+0x40>)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fe:	210f      	movs	r1, #15
 8002100:	f04f 30ff 	mov.w	r0, #4294967295
 8002104:	f7ff ff90 	bl	8002028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <SysTick_Config+0x40>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210e:	4b04      	ldr	r3, [pc, #16]	; (8002120 <SysTick_Config+0x40>)
 8002110:	2207      	movs	r2, #7
 8002112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	e000e010 	.word	0xe000e010

08002124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff ff2d 	bl	8001f8c <__NVIC_SetPriorityGrouping>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800213a:	b580      	push	{r7, lr}
 800213c:	b086      	sub	sp, #24
 800213e:	af00      	add	r7, sp, #0
 8002140:	4603      	mov	r3, r0
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
 8002146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800214c:	f7ff ff42 	bl	8001fd4 <__NVIC_GetPriorityGrouping>
 8002150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	6978      	ldr	r0, [r7, #20]
 8002158:	f7ff ff90 	bl	800207c <NVIC_EncodePriority>
 800215c:	4602      	mov	r2, r0
 800215e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff5f 	bl	8002028 <__NVIC_SetPriority>
}
 800216a:	bf00      	nop
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	4603      	mov	r3, r0
 800217a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff35 	bl	8001ff0 <__NVIC_EnableIRQ>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff ffa2 	bl	80020e0 <SysTick_Config>
 800219c:	4603      	mov	r3, r0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b08b      	sub	sp, #44	; 0x2c
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021b6:	2300      	movs	r3, #0
 80021b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ba:	e148      	b.n	800244e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021bc:	2201      	movs	r2, #1
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	69fa      	ldr	r2, [r7, #28]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	f040 8137 	bne.w	8002448 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	4aa3      	ldr	r2, [pc, #652]	; (800246c <HAL_GPIO_Init+0x2c4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d05e      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
 80021e4:	4aa1      	ldr	r2, [pc, #644]	; (800246c <HAL_GPIO_Init+0x2c4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d875      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 80021ea:	4aa1      	ldr	r2, [pc, #644]	; (8002470 <HAL_GPIO_Init+0x2c8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d058      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
 80021f0:	4a9f      	ldr	r2, [pc, #636]	; (8002470 <HAL_GPIO_Init+0x2c8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d86f      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 80021f6:	4a9f      	ldr	r2, [pc, #636]	; (8002474 <HAL_GPIO_Init+0x2cc>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d052      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
 80021fc:	4a9d      	ldr	r2, [pc, #628]	; (8002474 <HAL_GPIO_Init+0x2cc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d869      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 8002202:	4a9d      	ldr	r2, [pc, #628]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d04c      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
 8002208:	4a9b      	ldr	r2, [pc, #620]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d863      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 800220e:	4a9b      	ldr	r2, [pc, #620]	; (800247c <HAL_GPIO_Init+0x2d4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d046      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
 8002214:	4a99      	ldr	r2, [pc, #612]	; (800247c <HAL_GPIO_Init+0x2d4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d85d      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 800221a:	2b12      	cmp	r3, #18
 800221c:	d82a      	bhi.n	8002274 <HAL_GPIO_Init+0xcc>
 800221e:	2b12      	cmp	r3, #18
 8002220:	d859      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 8002222:	a201      	add	r2, pc, #4	; (adr r2, 8002228 <HAL_GPIO_Init+0x80>)
 8002224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002228:	080022a3 	.word	0x080022a3
 800222c:	0800227d 	.word	0x0800227d
 8002230:	0800228f 	.word	0x0800228f
 8002234:	080022d1 	.word	0x080022d1
 8002238:	080022d7 	.word	0x080022d7
 800223c:	080022d7 	.word	0x080022d7
 8002240:	080022d7 	.word	0x080022d7
 8002244:	080022d7 	.word	0x080022d7
 8002248:	080022d7 	.word	0x080022d7
 800224c:	080022d7 	.word	0x080022d7
 8002250:	080022d7 	.word	0x080022d7
 8002254:	080022d7 	.word	0x080022d7
 8002258:	080022d7 	.word	0x080022d7
 800225c:	080022d7 	.word	0x080022d7
 8002260:	080022d7 	.word	0x080022d7
 8002264:	080022d7 	.word	0x080022d7
 8002268:	080022d7 	.word	0x080022d7
 800226c:	08002285 	.word	0x08002285
 8002270:	08002299 	.word	0x08002299
 8002274:	4a82      	ldr	r2, [pc, #520]	; (8002480 <HAL_GPIO_Init+0x2d8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d013      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800227a:	e02c      	b.n	80022d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	623b      	str	r3, [r7, #32]
          break;
 8002282:	e029      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	3304      	adds	r3, #4
 800228a:	623b      	str	r3, [r7, #32]
          break;
 800228c:	e024      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	3308      	adds	r3, #8
 8002294:	623b      	str	r3, [r7, #32]
          break;
 8002296:	e01f      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	330c      	adds	r3, #12
 800229e:	623b      	str	r3, [r7, #32]
          break;
 80022a0:	e01a      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022aa:	2304      	movs	r3, #4
 80022ac:	623b      	str	r3, [r7, #32]
          break;
 80022ae:	e013      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d105      	bne.n	80022c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022b8:	2308      	movs	r3, #8
 80022ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	611a      	str	r2, [r3, #16]
          break;
 80022c2:	e009      	b.n	80022d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022c4:	2308      	movs	r3, #8
 80022c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	615a      	str	r2, [r3, #20]
          break;
 80022ce:	e003      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022d0:	2300      	movs	r3, #0
 80022d2:	623b      	str	r3, [r7, #32]
          break;
 80022d4:	e000      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          break;
 80022d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	2bff      	cmp	r3, #255	; 0xff
 80022dc:	d801      	bhi.n	80022e2 <HAL_GPIO_Init+0x13a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	e001      	b.n	80022e6 <HAL_GPIO_Init+0x13e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3304      	adds	r3, #4
 80022e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	2bff      	cmp	r3, #255	; 0xff
 80022ec:	d802      	bhi.n	80022f4 <HAL_GPIO_Init+0x14c>
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	e002      	b.n	80022fa <HAL_GPIO_Init+0x152>
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	3b08      	subs	r3, #8
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	210f      	movs	r1, #15
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	401a      	ands	r2, r3
 800230c:	6a39      	ldr	r1, [r7, #32]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	fa01 f303 	lsl.w	r3, r1, r3
 8002314:	431a      	orrs	r2, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 8090 	beq.w	8002448 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002328:	4b56      	ldr	r3, [pc, #344]	; (8002484 <HAL_GPIO_Init+0x2dc>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4a55      	ldr	r2, [pc, #340]	; (8002484 <HAL_GPIO_Init+0x2dc>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6193      	str	r3, [r2, #24]
 8002334:	4b53      	ldr	r3, [pc, #332]	; (8002484 <HAL_GPIO_Init+0x2dc>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002340:	4a51      	ldr	r2, [pc, #324]	; (8002488 <HAL_GPIO_Init+0x2e0>)
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	3302      	adds	r3, #2
 8002348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	220f      	movs	r2, #15
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4013      	ands	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a49      	ldr	r2, [pc, #292]	; (800248c <HAL_GPIO_Init+0x2e4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d00d      	beq.n	8002388 <HAL_GPIO_Init+0x1e0>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a48      	ldr	r2, [pc, #288]	; (8002490 <HAL_GPIO_Init+0x2e8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d007      	beq.n	8002384 <HAL_GPIO_Init+0x1dc>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a47      	ldr	r2, [pc, #284]	; (8002494 <HAL_GPIO_Init+0x2ec>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d101      	bne.n	8002380 <HAL_GPIO_Init+0x1d8>
 800237c:	2302      	movs	r3, #2
 800237e:	e004      	b.n	800238a <HAL_GPIO_Init+0x1e2>
 8002380:	2303      	movs	r3, #3
 8002382:	e002      	b.n	800238a <HAL_GPIO_Init+0x1e2>
 8002384:	2301      	movs	r3, #1
 8002386:	e000      	b.n	800238a <HAL_GPIO_Init+0x1e2>
 8002388:	2300      	movs	r3, #0
 800238a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800238c:	f002 0203 	and.w	r2, r2, #3
 8002390:	0092      	lsls	r2, r2, #2
 8002392:	4093      	lsls	r3, r2
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4313      	orrs	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800239a:	493b      	ldr	r1, [pc, #236]	; (8002488 <HAL_GPIO_Init+0x2e0>)
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	089b      	lsrs	r3, r3, #2
 80023a0:	3302      	adds	r3, #2
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d006      	beq.n	80023c2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023b4:	4b38      	ldr	r3, [pc, #224]	; (8002498 <HAL_GPIO_Init+0x2f0>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4937      	ldr	r1, [pc, #220]	; (8002498 <HAL_GPIO_Init+0x2f0>)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	600b      	str	r3, [r1, #0]
 80023c0:	e006      	b.n	80023d0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023c2:	4b35      	ldr	r3, [pc, #212]	; (8002498 <HAL_GPIO_Init+0x2f0>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	4933      	ldr	r1, [pc, #204]	; (8002498 <HAL_GPIO_Init+0x2f0>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d006      	beq.n	80023ea <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023dc:	4b2e      	ldr	r3, [pc, #184]	; (8002498 <HAL_GPIO_Init+0x2f0>)
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	492d      	ldr	r1, [pc, #180]	; (8002498 <HAL_GPIO_Init+0x2f0>)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	604b      	str	r3, [r1, #4]
 80023e8:	e006      	b.n	80023f8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023ea:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <HAL_GPIO_Init+0x2f0>)
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	4929      	ldr	r1, [pc, #164]	; (8002498 <HAL_GPIO_Init+0x2f0>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d006      	beq.n	8002412 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002404:	4b24      	ldr	r3, [pc, #144]	; (8002498 <HAL_GPIO_Init+0x2f0>)
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	4923      	ldr	r1, [pc, #140]	; (8002498 <HAL_GPIO_Init+0x2f0>)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	4313      	orrs	r3, r2
 800240e:	608b      	str	r3, [r1, #8]
 8002410:	e006      	b.n	8002420 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002412:	4b21      	ldr	r3, [pc, #132]	; (8002498 <HAL_GPIO_Init+0x2f0>)
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	43db      	mvns	r3, r3
 800241a:	491f      	ldr	r1, [pc, #124]	; (8002498 <HAL_GPIO_Init+0x2f0>)
 800241c:	4013      	ands	r3, r2
 800241e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d006      	beq.n	800243a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800242c:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <HAL_GPIO_Init+0x2f0>)
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	4919      	ldr	r1, [pc, #100]	; (8002498 <HAL_GPIO_Init+0x2f0>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	60cb      	str	r3, [r1, #12]
 8002438:	e006      	b.n	8002448 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800243a:	4b17      	ldr	r3, [pc, #92]	; (8002498 <HAL_GPIO_Init+0x2f0>)
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	43db      	mvns	r3, r3
 8002442:	4915      	ldr	r1, [pc, #84]	; (8002498 <HAL_GPIO_Init+0x2f0>)
 8002444:	4013      	ands	r3, r2
 8002446:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	3301      	adds	r3, #1
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	f47f aeaf 	bne.w	80021bc <HAL_GPIO_Init+0x14>
  }
}
 800245e:	bf00      	nop
 8002460:	bf00      	nop
 8002462:	372c      	adds	r7, #44	; 0x2c
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	10320000 	.word	0x10320000
 8002470:	10310000 	.word	0x10310000
 8002474:	10220000 	.word	0x10220000
 8002478:	10210000 	.word	0x10210000
 800247c:	10120000 	.word	0x10120000
 8002480:	10110000 	.word	0x10110000
 8002484:	40021000 	.word	0x40021000
 8002488:	40010000 	.word	0x40010000
 800248c:	40010800 	.word	0x40010800
 8002490:	40010c00 	.word	0x40010c00
 8002494:	40011000 	.word	0x40011000
 8002498:	40010400 	.word	0x40010400

0800249c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	887b      	ldrh	r3, [r7, #2]
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
 80024b8:	e001      	b.n	80024be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	807b      	strh	r3, [r7, #2]
 80024d6:	4613      	mov	r3, r2
 80024d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024da:	787b      	ldrb	r3, [r7, #1]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024e0:	887a      	ldrh	r2, [r7, #2]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024e6:	e003      	b.n	80024f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024e8:	887b      	ldrh	r3, [r7, #2]
 80024ea:	041a      	lsls	r2, r3, #16
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	611a      	str	r2, [r3, #16]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b085      	sub	sp, #20
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	460b      	mov	r3, r1
 8002504:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800250c:	887a      	ldrh	r2, [r7, #2]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4013      	ands	r3, r2
 8002512:	041a      	lsls	r2, r3, #16
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	43d9      	mvns	r1, r3
 8002518:	887b      	ldrh	r3, [r7, #2]
 800251a:	400b      	ands	r3, r1
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	611a      	str	r2, [r3, #16]
}
 8002522:	bf00      	nop
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr

0800252c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e26c      	b.n	8002a18 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 8087 	beq.w	800265a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800254c:	4b92      	ldr	r3, [pc, #584]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 030c 	and.w	r3, r3, #12
 8002554:	2b04      	cmp	r3, #4
 8002556:	d00c      	beq.n	8002572 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002558:	4b8f      	ldr	r3, [pc, #572]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	2b08      	cmp	r3, #8
 8002562:	d112      	bne.n	800258a <HAL_RCC_OscConfig+0x5e>
 8002564:	4b8c      	ldr	r3, [pc, #560]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002570:	d10b      	bne.n	800258a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002572:	4b89      	ldr	r3, [pc, #548]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d06c      	beq.n	8002658 <HAL_RCC_OscConfig+0x12c>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d168      	bne.n	8002658 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e246      	b.n	8002a18 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x76>
 8002594:	4b80      	ldr	r3, [pc, #512]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a7f      	ldr	r2, [pc, #508]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 800259a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	e02e      	b.n	8002600 <HAL_RCC_OscConfig+0xd4>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x98>
 80025aa:	4b7b      	ldr	r3, [pc, #492]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a7a      	ldr	r2, [pc, #488]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	4b78      	ldr	r3, [pc, #480]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a77      	ldr	r2, [pc, #476]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e01d      	b.n	8002600 <HAL_RCC_OscConfig+0xd4>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025cc:	d10c      	bne.n	80025e8 <HAL_RCC_OscConfig+0xbc>
 80025ce:	4b72      	ldr	r3, [pc, #456]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a71      	ldr	r2, [pc, #452]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	4b6f      	ldr	r3, [pc, #444]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6e      	ldr	r2, [pc, #440]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e00b      	b.n	8002600 <HAL_RCC_OscConfig+0xd4>
 80025e8:	4b6b      	ldr	r3, [pc, #428]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a6a      	ldr	r2, [pc, #424]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	4b68      	ldr	r3, [pc, #416]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a67      	ldr	r2, [pc, #412]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d013      	beq.n	8002630 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7ff fcb6 	bl	8001f78 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002610:	f7ff fcb2 	bl	8001f78 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	; 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e1fa      	b.n	8002a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002622:	4b5d      	ldr	r3, [pc, #372]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0xe4>
 800262e:	e014      	b.n	800265a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7ff fca2 	bl	8001f78 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002638:	f7ff fc9e 	bl	8001f78 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	; 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e1e6      	b.n	8002a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264a:	4b53      	ldr	r3, [pc, #332]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x10c>
 8002656:	e000      	b.n	800265a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d063      	beq.n	800272e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002666:	4b4c      	ldr	r3, [pc, #304]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00b      	beq.n	800268a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002672:	4b49      	ldr	r3, [pc, #292]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b08      	cmp	r3, #8
 800267c:	d11c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x18c>
 800267e:	4b46      	ldr	r3, [pc, #280]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d116      	bne.n	80026b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268a:	4b43      	ldr	r3, [pc, #268]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <HAL_RCC_OscConfig+0x176>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d001      	beq.n	80026a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e1ba      	b.n	8002a18 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a2:	4b3d      	ldr	r3, [pc, #244]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4939      	ldr	r1, [pc, #228]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b6:	e03a      	b.n	800272e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d020      	beq.n	8002702 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c0:	4b36      	ldr	r3, [pc, #216]	; (800279c <HAL_RCC_OscConfig+0x270>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c6:	f7ff fc57 	bl	8001f78 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ce:	f7ff fc53 	bl	8001f78 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e19b      	b.n	8002a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e0:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ec:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4927      	ldr	r1, [pc, #156]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	600b      	str	r3, [r1, #0]
 8002700:	e015      	b.n	800272e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002702:	4b26      	ldr	r3, [pc, #152]	; (800279c <HAL_RCC_OscConfig+0x270>)
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7ff fc36 	bl	8001f78 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002710:	f7ff fc32 	bl	8001f78 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e17a      	b.n	8002a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002722:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d03a      	beq.n	80027b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d019      	beq.n	8002776 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002742:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <HAL_RCC_OscConfig+0x274>)
 8002744:	2201      	movs	r2, #1
 8002746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002748:	f7ff fc16 	bl	8001f78 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002750:	f7ff fc12 	bl	8001f78 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e15a      	b.n	8002a18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002762:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800276e:	2001      	movs	r0, #1
 8002770:	f000 faa6 	bl	8002cc0 <RCC_Delay>
 8002774:	e01c      	b.n	80027b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002776:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <HAL_RCC_OscConfig+0x274>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277c:	f7ff fbfc 	bl	8001f78 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002782:	e00f      	b.n	80027a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002784:	f7ff fbf8 	bl	8001f78 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d908      	bls.n	80027a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e140      	b.n	8002a18 <HAL_RCC_OscConfig+0x4ec>
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
 800279c:	42420000 	.word	0x42420000
 80027a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a4:	4b9e      	ldr	r3, [pc, #632]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e9      	bne.n	8002784 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80a6 	beq.w	800290a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027be:	2300      	movs	r3, #0
 80027c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c2:	4b97      	ldr	r3, [pc, #604]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10d      	bne.n	80027ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	4b94      	ldr	r3, [pc, #592]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	4a93      	ldr	r2, [pc, #588]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 80027d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d8:	61d3      	str	r3, [r2, #28]
 80027da:	4b91      	ldr	r3, [pc, #580]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e6:	2301      	movs	r3, #1
 80027e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ea:	4b8e      	ldr	r3, [pc, #568]	; (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d118      	bne.n	8002828 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f6:	4b8b      	ldr	r3, [pc, #556]	; (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a8a      	ldr	r2, [pc, #552]	; (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 80027fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002802:	f7ff fbb9 	bl	8001f78 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280a:	f7ff fbb5 	bl	8001f78 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b64      	cmp	r3, #100	; 0x64
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e0fd      	b.n	8002a18 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	4b81      	ldr	r3, [pc, #516]	; (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d106      	bne.n	800283e <HAL_RCC_OscConfig+0x312>
 8002830:	4b7b      	ldr	r3, [pc, #492]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4a7a      	ldr	r2, [pc, #488]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6213      	str	r3, [r2, #32]
 800283c:	e02d      	b.n	800289a <HAL_RCC_OscConfig+0x36e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10c      	bne.n	8002860 <HAL_RCC_OscConfig+0x334>
 8002846:	4b76      	ldr	r3, [pc, #472]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	4a75      	ldr	r2, [pc, #468]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	6213      	str	r3, [r2, #32]
 8002852:	4b73      	ldr	r3, [pc, #460]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	4a72      	ldr	r2, [pc, #456]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 8002858:	f023 0304 	bic.w	r3, r3, #4
 800285c:	6213      	str	r3, [r2, #32]
 800285e:	e01c      	b.n	800289a <HAL_RCC_OscConfig+0x36e>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b05      	cmp	r3, #5
 8002866:	d10c      	bne.n	8002882 <HAL_RCC_OscConfig+0x356>
 8002868:	4b6d      	ldr	r3, [pc, #436]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4a6c      	ldr	r2, [pc, #432]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 800286e:	f043 0304 	orr.w	r3, r3, #4
 8002872:	6213      	str	r3, [r2, #32]
 8002874:	4b6a      	ldr	r3, [pc, #424]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	4a69      	ldr	r2, [pc, #420]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6213      	str	r3, [r2, #32]
 8002880:	e00b      	b.n	800289a <HAL_RCC_OscConfig+0x36e>
 8002882:	4b67      	ldr	r3, [pc, #412]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	4a66      	ldr	r2, [pc, #408]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	6213      	str	r3, [r2, #32]
 800288e:	4b64      	ldr	r3, [pc, #400]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	4a63      	ldr	r2, [pc, #396]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 8002894:	f023 0304 	bic.w	r3, r3, #4
 8002898:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d015      	beq.n	80028ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a2:	f7ff fb69 	bl	8001f78 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a8:	e00a      	b.n	80028c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028aa:	f7ff fb65 	bl	8001f78 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e0ab      	b.n	8002a18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c0:	4b57      	ldr	r3, [pc, #348]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0ee      	beq.n	80028aa <HAL_RCC_OscConfig+0x37e>
 80028cc:	e014      	b.n	80028f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ce:	f7ff fb53 	bl	8001f78 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d4:	e00a      	b.n	80028ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d6:	f7ff fb4f 	bl	8001f78 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e095      	b.n	8002a18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ec:	4b4c      	ldr	r3, [pc, #304]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1ee      	bne.n	80028d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d105      	bne.n	800290a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fe:	4b48      	ldr	r3, [pc, #288]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	4a47      	ldr	r2, [pc, #284]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 8002904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002908:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 8081 	beq.w	8002a16 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002914:	4b42      	ldr	r3, [pc, #264]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 030c 	and.w	r3, r3, #12
 800291c:	2b08      	cmp	r3, #8
 800291e:	d061      	beq.n	80029e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d146      	bne.n	80029b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002928:	4b3f      	ldr	r3, [pc, #252]	; (8002a28 <HAL_RCC_OscConfig+0x4fc>)
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292e:	f7ff fb23 	bl	8001f78 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002936:	f7ff fb1f 	bl	8001f78 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e067      	b.n	8002a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002948:	4b35      	ldr	r3, [pc, #212]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f0      	bne.n	8002936 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800295c:	d108      	bne.n	8002970 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800295e:	4b30      	ldr	r3, [pc, #192]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	492d      	ldr	r1, [pc, #180]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002970:	4b2b      	ldr	r3, [pc, #172]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a19      	ldr	r1, [r3, #32]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	430b      	orrs	r3, r1
 8002982:	4927      	ldr	r1, [pc, #156]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 8002984:	4313      	orrs	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002988:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <HAL_RCC_OscConfig+0x4fc>)
 800298a:	2201      	movs	r2, #1
 800298c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298e:	f7ff faf3 	bl	8001f78 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002996:	f7ff faef 	bl	8001f78 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e037      	b.n	8002a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029a8:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0f0      	beq.n	8002996 <HAL_RCC_OscConfig+0x46a>
 80029b4:	e02f      	b.n	8002a16 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b6:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <HAL_RCC_OscConfig+0x4fc>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7ff fadc 	bl	8001f78 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c4:	f7ff fad8 	bl	8001f78 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e020      	b.n	8002a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d6:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x498>
 80029e2:	e018      	b.n	8002a16 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e013      	b.n	8002a18 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_RCC_OscConfig+0x4f4>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d106      	bne.n	8002a12 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d001      	beq.n	8002a16 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40007000 	.word	0x40007000
 8002a28:	42420060 	.word	0x42420060

08002a2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0d0      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a40:	4b6a      	ldr	r3, [pc, #424]	; (8002bec <HAL_RCC_ClockConfig+0x1c0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d910      	bls.n	8002a70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4e:	4b67      	ldr	r3, [pc, #412]	; (8002bec <HAL_RCC_ClockConfig+0x1c0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 0207 	bic.w	r2, r3, #7
 8002a56:	4965      	ldr	r1, [pc, #404]	; (8002bec <HAL_RCC_ClockConfig+0x1c0>)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5e:	4b63      	ldr	r3, [pc, #396]	; (8002bec <HAL_RCC_ClockConfig+0x1c0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0b8      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d020      	beq.n	8002abe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a88:	4b59      	ldr	r3, [pc, #356]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4a58      	ldr	r2, [pc, #352]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aa0:	4b53      	ldr	r3, [pc, #332]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4a52      	ldr	r2, [pc, #328]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002aaa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aac:	4b50      	ldr	r3, [pc, #320]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	494d      	ldr	r1, [pc, #308]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d040      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad2:	4b47      	ldr	r3, [pc, #284]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d115      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e07f      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d107      	bne.n	8002afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aea:	4b41      	ldr	r3, [pc, #260]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e073      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afa:	4b3d      	ldr	r3, [pc, #244]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e06b      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b0a:	4b39      	ldr	r3, [pc, #228]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f023 0203 	bic.w	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4936      	ldr	r1, [pc, #216]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b1c:	f7ff fa2c 	bl	8001f78 <HAL_GetTick>
 8002b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b22:	e00a      	b.n	8002b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b24:	f7ff fa28 	bl	8001f78 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e053      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3a:	4b2d      	ldr	r3, [pc, #180]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 020c 	and.w	r2, r3, #12
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d1eb      	bne.n	8002b24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b27      	ldr	r3, [pc, #156]	; (8002bec <HAL_RCC_ClockConfig+0x1c0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d210      	bcs.n	8002b7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b24      	ldr	r3, [pc, #144]	; (8002bec <HAL_RCC_ClockConfig+0x1c0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 0207 	bic.w	r2, r3, #7
 8002b62:	4922      	ldr	r1, [pc, #136]	; (8002bec <HAL_RCC_ClockConfig+0x1c0>)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6a:	4b20      	ldr	r3, [pc, #128]	; (8002bec <HAL_RCC_ClockConfig+0x1c0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e032      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b88:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4916      	ldr	r1, [pc, #88]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ba6:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	490e      	ldr	r1, [pc, #56]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bba:	f000 f821 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	490a      	ldr	r1, [pc, #40]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bcc:	5ccb      	ldrb	r3, [r1, r3]
 8002bce:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd2:	4a09      	ldr	r2, [pc, #36]	; (8002bf8 <HAL_RCC_ClockConfig+0x1cc>)
 8002bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <HAL_RCC_ClockConfig+0x1d0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff f98a 	bl	8001ef4 <HAL_InitTick>

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40022000 	.word	0x40022000
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	08003544 	.word	0x08003544
 8002bf8:	20000080 	.word	0x20000080
 8002bfc:	20000084 	.word	0x20000084

08002c00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c00:	b490      	push	{r4, r7}
 8002c02:	b08a      	sub	sp, #40	; 0x28
 8002c04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c06:	4b2a      	ldr	r3, [pc, #168]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c08:	1d3c      	adds	r4, r7, #4
 8002c0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c10:	f240 2301 	movw	r3, #513	; 0x201
 8002c14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c2a:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d002      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0x40>
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d003      	beq.n	8002c46 <HAL_RCC_GetSysClockFreq+0x46>
 8002c3e:	e02d      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c40:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c42:	623b      	str	r3, [r7, #32]
      break;
 8002c44:	e02d      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	0c9b      	lsrs	r3, r3, #18
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c52:	4413      	add	r3, r2
 8002c54:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c58:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d013      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c64:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	0c5b      	lsrs	r3, r3, #17
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c72:	4413      	add	r3, r2
 8002c74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	4a0e      	ldr	r2, [pc, #56]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c7e:	fb02 f203 	mul.w	r2, r2, r3
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8a:	e004      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	4a0b      	ldr	r2, [pc, #44]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c90:	fb02 f303 	mul.w	r3, r2, r3
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	623b      	str	r3, [r7, #32]
      break;
 8002c9a:	e002      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c9e:	623b      	str	r3, [r7, #32]
      break;
 8002ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3728      	adds	r7, #40	; 0x28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc90      	pop	{r4, r7}
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	08003534 	.word	0x08003534
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	007a1200 	.word	0x007a1200
 8002cbc:	003d0900 	.word	0x003d0900

08002cc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <RCC_Delay+0x34>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <RCC_Delay+0x38>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0a5b      	lsrs	r3, r3, #9
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	fb02 f303 	mul.w	r3, r2, r3
 8002cda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cdc:	bf00      	nop
  }
  while (Delay --);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1e5a      	subs	r2, r3, #1
 8002ce2:	60fa      	str	r2, [r7, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f9      	bne.n	8002cdc <RCC_Delay+0x1c>
}
 8002ce8:	bf00      	nop
 8002cea:	bf00      	nop
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr
 8002cf4:	20000080 	.word	0x20000080
 8002cf8:	10624dd3 	.word	0x10624dd3

08002cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e041      	b.n	8002d92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fe ff6a 	bl	8001bfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f000 fa6a 	bl	8003214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d001      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e035      	b.n	8002e20 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a16      	ldr	r2, [pc, #88]	; (8002e2c <HAL_TIM_Base_Start_IT+0x90>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d009      	beq.n	8002dea <HAL_TIM_Base_Start_IT+0x4e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dde:	d004      	beq.n	8002dea <HAL_TIM_Base_Start_IT+0x4e>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a12      	ldr	r2, [pc, #72]	; (8002e30 <HAL_TIM_Base_Start_IT+0x94>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d111      	bne.n	8002e0e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b06      	cmp	r3, #6
 8002dfa:	d010      	beq.n	8002e1e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0c:	e007      	b.n	8002e1e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0201 	orr.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40012c00 	.word	0x40012c00
 8002e30:	40000400 	.word	0x40000400

08002e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d122      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d11b      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0202 	mvn.w	r2, #2
 8002e60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f9b1 	bl	80031de <HAL_TIM_IC_CaptureCallback>
 8002e7c:	e005      	b.n	8002e8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f9a4 	bl	80031cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f9b3 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d122      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d11b      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0204 	mvn.w	r2, #4
 8002eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f987 	bl	80031de <HAL_TIM_IC_CaptureCallback>
 8002ed0:	e005      	b.n	8002ede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f97a 	bl	80031cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f989 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d122      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d11b      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0208 	mvn.w	r2, #8
 8002f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f95d 	bl	80031de <HAL_TIM_IC_CaptureCallback>
 8002f24:	e005      	b.n	8002f32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f950 	bl	80031cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f95f 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b10      	cmp	r3, #16
 8002f44:	d122      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b10      	cmp	r3, #16
 8002f52:	d11b      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0210 	mvn.w	r2, #16
 8002f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2208      	movs	r2, #8
 8002f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f933 	bl	80031de <HAL_TIM_IC_CaptureCallback>
 8002f78:	e005      	b.n	8002f86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f926 	bl	80031cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f935 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d10e      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d107      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0201 	mvn.w	r2, #1
 8002fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fe fc04 	bl	80017c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc2:	2b80      	cmp	r3, #128	; 0x80
 8002fc4:	d10e      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd0:	2b80      	cmp	r3, #128	; 0x80
 8002fd2:	d107      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fa67 	bl	80034b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fee:	2b40      	cmp	r3, #64	; 0x40
 8002ff0:	d10e      	bne.n	8003010 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffc:	2b40      	cmp	r3, #64	; 0x40
 8002ffe:	d107      	bne.n	8003010 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f8f9 	bl	8003202 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0320 	and.w	r3, r3, #32
 800301a:	2b20      	cmp	r3, #32
 800301c:	d10e      	bne.n	800303c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b20      	cmp	r3, #32
 800302a:	d107      	bne.n	800303c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0220 	mvn.w	r2, #32
 8003034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fa32 	bl	80034a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_TIM_ConfigClockSource+0x18>
 8003058:	2302      	movs	r3, #2
 800305a:	e0b3      	b.n	80031c4 <HAL_TIM_ConfigClockSource+0x180>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800307a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003082:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003094:	d03e      	beq.n	8003114 <HAL_TIM_ConfigClockSource+0xd0>
 8003096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800309a:	f200 8087 	bhi.w	80031ac <HAL_TIM_ConfigClockSource+0x168>
 800309e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a2:	f000 8085 	beq.w	80031b0 <HAL_TIM_ConfigClockSource+0x16c>
 80030a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030aa:	d87f      	bhi.n	80031ac <HAL_TIM_ConfigClockSource+0x168>
 80030ac:	2b70      	cmp	r3, #112	; 0x70
 80030ae:	d01a      	beq.n	80030e6 <HAL_TIM_ConfigClockSource+0xa2>
 80030b0:	2b70      	cmp	r3, #112	; 0x70
 80030b2:	d87b      	bhi.n	80031ac <HAL_TIM_ConfigClockSource+0x168>
 80030b4:	2b60      	cmp	r3, #96	; 0x60
 80030b6:	d050      	beq.n	800315a <HAL_TIM_ConfigClockSource+0x116>
 80030b8:	2b60      	cmp	r3, #96	; 0x60
 80030ba:	d877      	bhi.n	80031ac <HAL_TIM_ConfigClockSource+0x168>
 80030bc:	2b50      	cmp	r3, #80	; 0x50
 80030be:	d03c      	beq.n	800313a <HAL_TIM_ConfigClockSource+0xf6>
 80030c0:	2b50      	cmp	r3, #80	; 0x50
 80030c2:	d873      	bhi.n	80031ac <HAL_TIM_ConfigClockSource+0x168>
 80030c4:	2b40      	cmp	r3, #64	; 0x40
 80030c6:	d058      	beq.n	800317a <HAL_TIM_ConfigClockSource+0x136>
 80030c8:	2b40      	cmp	r3, #64	; 0x40
 80030ca:	d86f      	bhi.n	80031ac <HAL_TIM_ConfigClockSource+0x168>
 80030cc:	2b30      	cmp	r3, #48	; 0x30
 80030ce:	d064      	beq.n	800319a <HAL_TIM_ConfigClockSource+0x156>
 80030d0:	2b30      	cmp	r3, #48	; 0x30
 80030d2:	d86b      	bhi.n	80031ac <HAL_TIM_ConfigClockSource+0x168>
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d060      	beq.n	800319a <HAL_TIM_ConfigClockSource+0x156>
 80030d8:	2b20      	cmp	r3, #32
 80030da:	d867      	bhi.n	80031ac <HAL_TIM_ConfigClockSource+0x168>
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d05c      	beq.n	800319a <HAL_TIM_ConfigClockSource+0x156>
 80030e0:	2b10      	cmp	r3, #16
 80030e2:	d05a      	beq.n	800319a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80030e4:	e062      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	6899      	ldr	r1, [r3, #8]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f000 f95c 	bl	80033b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003108:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	609a      	str	r2, [r3, #8]
      break;
 8003112:	e04e      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	6899      	ldr	r1, [r3, #8]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f000 f945 	bl	80033b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003136:	609a      	str	r2, [r3, #8]
      break;
 8003138:	e03b      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	6859      	ldr	r1, [r3, #4]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	461a      	mov	r2, r3
 8003148:	f000 f8bc 	bl	80032c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2150      	movs	r1, #80	; 0x50
 8003152:	4618      	mov	r0, r3
 8003154:	f000 f913 	bl	800337e <TIM_ITRx_SetConfig>
      break;
 8003158:	e02b      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6859      	ldr	r1, [r3, #4]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	461a      	mov	r2, r3
 8003168:	f000 f8da 	bl	8003320 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2160      	movs	r1, #96	; 0x60
 8003172:	4618      	mov	r0, r3
 8003174:	f000 f903 	bl	800337e <TIM_ITRx_SetConfig>
      break;
 8003178:	e01b      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	6859      	ldr	r1, [r3, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	461a      	mov	r2, r3
 8003188:	f000 f89c 	bl	80032c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2140      	movs	r1, #64	; 0x40
 8003192:	4618      	mov	r0, r3
 8003194:	f000 f8f3 	bl	800337e <TIM_ITRx_SetConfig>
      break;
 8003198:	e00b      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4619      	mov	r1, r3
 80031a4:	4610      	mov	r0, r2
 80031a6:	f000 f8ea 	bl	800337e <TIM_ITRx_SetConfig>
        break;
 80031aa:	e002      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031ac:	bf00      	nop
 80031ae:	e000      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr

08003202 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a25      	ldr	r2, [pc, #148]	; (80032bc <TIM_Base_SetConfig+0xa8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d007      	beq.n	800323c <TIM_Base_SetConfig+0x28>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003232:	d003      	beq.n	800323c <TIM_Base_SetConfig+0x28>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a22      	ldr	r2, [pc, #136]	; (80032c0 <TIM_Base_SetConfig+0xac>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d108      	bne.n	800324e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a1a      	ldr	r2, [pc, #104]	; (80032bc <TIM_Base_SetConfig+0xa8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d007      	beq.n	8003266 <TIM_Base_SetConfig+0x52>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325c:	d003      	beq.n	8003266 <TIM_Base_SetConfig+0x52>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a17      	ldr	r2, [pc, #92]	; (80032c0 <TIM_Base_SetConfig+0xac>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d108      	bne.n	8003278 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800326c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4313      	orrs	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	4313      	orrs	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a07      	ldr	r2, [pc, #28]	; (80032bc <TIM_Base_SetConfig+0xa8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d103      	bne.n	80032ac <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	615a      	str	r2, [r3, #20]
}
 80032b2:	bf00      	nop
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr
 80032bc:	40012c00 	.word	0x40012c00
 80032c0:	40000400 	.word	0x40000400

080032c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	f023 0201 	bic.w	r2, r3, #1
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f023 030a 	bic.w	r3, r3, #10
 8003300:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	621a      	str	r2, [r3, #32]
}
 8003316:	bf00      	nop
 8003318:	371c      	adds	r7, #28
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003320:	b480      	push	{r7}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	f023 0210 	bic.w	r2, r3, #16
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800334a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	031b      	lsls	r3, r3, #12
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800335c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	621a      	str	r2, [r3, #32]
}
 8003374:	bf00      	nop
 8003376:	371c      	adds	r7, #28
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr

0800337e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800337e:	b480      	push	{r7}
 8003380:	b085      	sub	sp, #20
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003394:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	f043 0307 	orr.w	r3, r3, #7
 80033a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	609a      	str	r2, [r3, #8]
}
 80033a8:	bf00      	nop
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr

080033b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b087      	sub	sp, #28
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	021a      	lsls	r2, r3, #8
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	431a      	orrs	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4313      	orrs	r3, r2
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	609a      	str	r2, [r3, #8]
}
 80033e6:	bf00      	nop
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr

080033f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003404:	2302      	movs	r3, #2
 8003406:	e041      	b.n	800348c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a14      	ldr	r2, [pc, #80]	; (8003498 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d009      	beq.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003454:	d004      	beq.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a10      	ldr	r2, [pc, #64]	; (800349c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d10c      	bne.n	800347a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003466:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	4313      	orrs	r3, r2
 8003470:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40012c00 	.word	0x40012c00
 800349c:	40000400 	.word	0x40000400

080034a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr

080034b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <__libc_init_array>:
 80034c4:	b570      	push	{r4, r5, r6, lr}
 80034c6:	2600      	movs	r6, #0
 80034c8:	4d0c      	ldr	r5, [pc, #48]	; (80034fc <__libc_init_array+0x38>)
 80034ca:	4c0d      	ldr	r4, [pc, #52]	; (8003500 <__libc_init_array+0x3c>)
 80034cc:	1b64      	subs	r4, r4, r5
 80034ce:	10a4      	asrs	r4, r4, #2
 80034d0:	42a6      	cmp	r6, r4
 80034d2:	d109      	bne.n	80034e8 <__libc_init_array+0x24>
 80034d4:	f000 f822 	bl	800351c <_init>
 80034d8:	2600      	movs	r6, #0
 80034da:	4d0a      	ldr	r5, [pc, #40]	; (8003504 <__libc_init_array+0x40>)
 80034dc:	4c0a      	ldr	r4, [pc, #40]	; (8003508 <__libc_init_array+0x44>)
 80034de:	1b64      	subs	r4, r4, r5
 80034e0:	10a4      	asrs	r4, r4, #2
 80034e2:	42a6      	cmp	r6, r4
 80034e4:	d105      	bne.n	80034f2 <__libc_init_array+0x2e>
 80034e6:	bd70      	pop	{r4, r5, r6, pc}
 80034e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ec:	4798      	blx	r3
 80034ee:	3601      	adds	r6, #1
 80034f0:	e7ee      	b.n	80034d0 <__libc_init_array+0xc>
 80034f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f6:	4798      	blx	r3
 80034f8:	3601      	adds	r6, #1
 80034fa:	e7f2      	b.n	80034e2 <__libc_init_array+0x1e>
 80034fc:	08003554 	.word	0x08003554
 8003500:	08003554 	.word	0x08003554
 8003504:	08003554 	.word	0x08003554
 8003508:	08003558 	.word	0x08003558

0800350c <memset>:
 800350c:	4603      	mov	r3, r0
 800350e:	4402      	add	r2, r0
 8003510:	4293      	cmp	r3, r2
 8003512:	d100      	bne.n	8003516 <memset+0xa>
 8003514:	4770      	bx	lr
 8003516:	f803 1b01 	strb.w	r1, [r3], #1
 800351a:	e7f9      	b.n	8003510 <memset+0x4>

0800351c <_init>:
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	bf00      	nop
 8003520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003522:	bc08      	pop	{r3}
 8003524:	469e      	mov	lr, r3
 8003526:	4770      	bx	lr

08003528 <_fini>:
 8003528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352a:	bf00      	nop
 800352c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352e:	bc08      	pop	{r3}
 8003530:	469e      	mov	lr, r3
 8003532:	4770      	bx	lr
